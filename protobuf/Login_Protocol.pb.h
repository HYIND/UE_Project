// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login_Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_5fProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_5fProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_5fProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_5fProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_5fProtocol_2eproto;
namespace Login_Protobuf {
class Account;
struct AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class Login_Request;
struct Login_RequestDefaultTypeInternal;
extern Login_RequestDefaultTypeInternal _Login_Request_default_instance_;
class Login_Response;
struct Login_ResponseDefaultTypeInternal;
extern Login_ResponseDefaultTypeInternal _Login_Response_default_instance_;
class Signup_Request;
struct Signup_RequestDefaultTypeInternal;
extern Signup_RequestDefaultTypeInternal _Signup_Request_default_instance_;
class Signup_Response;
struct Signup_ResponseDefaultTypeInternal;
extern Signup_ResponseDefaultTypeInternal _Signup_Response_default_instance_;
}  // namespace Login_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Login_Protobuf::Account* Arena::CreateMaybeMessage<::Login_Protobuf::Account>(Arena*);
template<> ::Login_Protobuf::Login_Request* Arena::CreateMaybeMessage<::Login_Protobuf::Login_Request>(Arena*);
template<> ::Login_Protobuf::Login_Response* Arena::CreateMaybeMessage<::Login_Protobuf::Login_Response>(Arena*);
template<> ::Login_Protobuf::Signup_Request* Arena::CreateMaybeMessage<::Login_Protobuf::Signup_Request>(Arena*);
template<> ::Login_Protobuf::Signup_Response* Arena::CreateMaybeMessage<::Login_Protobuf::Signup_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Login_Protobuf {

// ===================================================================

class Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_Protobuf.Account) */ {
 public:
  inline Account() : Account(nullptr) {}
  ~Account() override;
  explicit PROTOBUF_CONSTEXPR Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Account& from) {
    Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_Protobuf.Account";
  }
  protected:
  explicit Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Login_Protobuf.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Login_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_Protobuf.Login_Request) */ {
 public:
  inline Login_Request() : Login_Request(nullptr) {}
  ~Login_Request() override;
  explicit PROTOBUF_CONSTEXPR Login_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_Request(const Login_Request& from);
  Login_Request(Login_Request&& from) noexcept
    : Login_Request() {
    *this = ::std::move(from);
  }

  inline Login_Request& operator=(const Login_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Request& operator=(Login_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_Request* internal_default_instance() {
    return reinterpret_cast<const Login_Request*>(
               &_Login_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login_Request& a, Login_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_Request& from) {
    Login_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_Protobuf.Login_Request";
  }
  protected:
  explicit Login_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogininfoFieldNumber = 1,
  };
  // .Login_Protobuf.Account Logininfo = 1;
  bool has_logininfo() const;
  private:
  bool _internal_has_logininfo() const;
  public:
  void clear_logininfo();
  const ::Login_Protobuf::Account& logininfo() const;
  PROTOBUF_NODISCARD ::Login_Protobuf::Account* release_logininfo();
  ::Login_Protobuf::Account* mutable_logininfo();
  void set_allocated_logininfo(::Login_Protobuf::Account* logininfo);
  private:
  const ::Login_Protobuf::Account& _internal_logininfo() const;
  ::Login_Protobuf::Account* _internal_mutable_logininfo();
  public:
  void unsafe_arena_set_allocated_logininfo(
      ::Login_Protobuf::Account* logininfo);
  ::Login_Protobuf::Account* unsafe_arena_release_logininfo();

  // @@protoc_insertion_point(class_scope:Login_Protobuf.Login_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Login_Protobuf::Account* logininfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Signup_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_Protobuf.Signup_Request) */ {
 public:
  inline Signup_Request() : Signup_Request(nullptr) {}
  ~Signup_Request() override;
  explicit PROTOBUF_CONSTEXPR Signup_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signup_Request(const Signup_Request& from);
  Signup_Request(Signup_Request&& from) noexcept
    : Signup_Request() {
    *this = ::std::move(from);
  }

  inline Signup_Request& operator=(const Signup_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signup_Request& operator=(Signup_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signup_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signup_Request* internal_default_instance() {
    return reinterpret_cast<const Signup_Request*>(
               &_Signup_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signup_Request& a, Signup_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Signup_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signup_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signup_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signup_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signup_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signup_Request& from) {
    Signup_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signup_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_Protobuf.Signup_Request";
  }
  protected:
  explicit Signup_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSignupinfoFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Login_Protobuf.Account Signupinfo = 1;
  bool has_signupinfo() const;
  private:
  bool _internal_has_signupinfo() const;
  public:
  void clear_signupinfo();
  const ::Login_Protobuf::Account& signupinfo() const;
  PROTOBUF_NODISCARD ::Login_Protobuf::Account* release_signupinfo();
  ::Login_Protobuf::Account* mutable_signupinfo();
  void set_allocated_signupinfo(::Login_Protobuf::Account* signupinfo);
  private:
  const ::Login_Protobuf::Account& _internal_signupinfo() const;
  ::Login_Protobuf::Account* _internal_mutable_signupinfo();
  public:
  void unsafe_arena_set_allocated_signupinfo(
      ::Login_Protobuf::Account* signupinfo);
  ::Login_Protobuf::Account* unsafe_arena_release_signupinfo();

  // @@protoc_insertion_point(class_scope:Login_Protobuf.Signup_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Login_Protobuf::Account* signupinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Login_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_Protobuf.Login_Response) */ {
 public:
  inline Login_Response() : Login_Response(nullptr) {}
  ~Login_Response() override;
  explicit PROTOBUF_CONSTEXPR Login_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login_Response(const Login_Response& from);
  Login_Response(Login_Response&& from) noexcept
    : Login_Response() {
    *this = ::std::move(from);
  }

  inline Login_Response& operator=(const Login_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Response& operator=(Login_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login_Response* internal_default_instance() {
    return reinterpret_cast<const Login_Response*>(
               &_Login_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Login_Response& a, Login_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login_Response& from) {
    Login_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_Protobuf.Login_Response";
  }
  protected:
  explicit Login_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Login_Protobuf.Login_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Signup_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Login_Protobuf.Signup_Response) */ {
 public:
  inline Signup_Response() : Signup_Response(nullptr) {}
  ~Signup_Response() override;
  explicit PROTOBUF_CONSTEXPR Signup_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signup_Response(const Signup_Response& from);
  Signup_Response(Signup_Response&& from) noexcept
    : Signup_Response() {
    *this = ::std::move(from);
  }

  inline Signup_Response& operator=(const Signup_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signup_Response& operator=(Signup_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signup_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signup_Response* internal_default_instance() {
    return reinterpret_cast<const Signup_Response*>(
               &_Signup_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Signup_Response& a, Signup_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Signup_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signup_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signup_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signup_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signup_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signup_Response& from) {
    Signup_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signup_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Login_Protobuf.Signup_Response";
  }
  protected:
  explicit Signup_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Login_Protobuf.Signup_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_5fProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Account

// string account = 1;
inline void Account::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& Account::account() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Account.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login_Protobuf.Account.account)
}
inline std::string* Account::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Account.account)
  return _s;
}
inline const std::string& Account::_internal_account() const {
  return _impl_.account_.Get();
}
inline void Account::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_account() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Account.account)
  return _impl_.account_.Release();
}
inline void Account::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Account.account)
}

// string password = 2;
inline void Account::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Account::password() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Account.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Account::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login_Protobuf.Account.password)
}
inline std::string* Account::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Account.password)
  return _s;
}
inline const std::string& Account::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Account::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Account::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Account::release_password() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Account.password)
  return _impl_.password_.Release();
}
inline void Account::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Account.password)
}

// -------------------------------------------------------------------

// Login_Request

// .Login_Protobuf.Account Logininfo = 1;
inline bool Login_Request::_internal_has_logininfo() const {
  return this != internal_default_instance() && _impl_.logininfo_ != nullptr;
}
inline bool Login_Request::has_logininfo() const {
  return _internal_has_logininfo();
}
inline void Login_Request::clear_logininfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.logininfo_ != nullptr) {
    delete _impl_.logininfo_;
  }
  _impl_.logininfo_ = nullptr;
}
inline const ::Login_Protobuf::Account& Login_Request::_internal_logininfo() const {
  const ::Login_Protobuf::Account* p = _impl_.logininfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Login_Protobuf::Account&>(
      ::Login_Protobuf::_Account_default_instance_);
}
inline const ::Login_Protobuf::Account& Login_Request::logininfo() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Login_Request.Logininfo)
  return _internal_logininfo();
}
inline void Login_Request::unsafe_arena_set_allocated_logininfo(
    ::Login_Protobuf::Account* logininfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logininfo_);
  }
  _impl_.logininfo_ = logininfo;
  if (logininfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Login_Protobuf.Login_Request.Logininfo)
}
inline ::Login_Protobuf::Account* Login_Request::release_logininfo() {
  
  ::Login_Protobuf::Account* temp = _impl_.logininfo_;
  _impl_.logininfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Login_Protobuf::Account* Login_Request::unsafe_arena_release_logininfo() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Login_Request.Logininfo)
  
  ::Login_Protobuf::Account* temp = _impl_.logininfo_;
  _impl_.logininfo_ = nullptr;
  return temp;
}
inline ::Login_Protobuf::Account* Login_Request::_internal_mutable_logininfo() {
  
  if (_impl_.logininfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Login_Protobuf::Account>(GetArenaForAllocation());
    _impl_.logininfo_ = p;
  }
  return _impl_.logininfo_;
}
inline ::Login_Protobuf::Account* Login_Request::mutable_logininfo() {
  ::Login_Protobuf::Account* _msg = _internal_mutable_logininfo();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Login_Request.Logininfo)
  return _msg;
}
inline void Login_Request::set_allocated_logininfo(::Login_Protobuf::Account* logininfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logininfo_;
  }
  if (logininfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logininfo);
    if (message_arena != submessage_arena) {
      logininfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logininfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logininfo_ = logininfo;
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Login_Request.Logininfo)
}

// -------------------------------------------------------------------

// Signup_Request

// .Login_Protobuf.Account Signupinfo = 1;
inline bool Signup_Request::_internal_has_signupinfo() const {
  return this != internal_default_instance() && _impl_.signupinfo_ != nullptr;
}
inline bool Signup_Request::has_signupinfo() const {
  return _internal_has_signupinfo();
}
inline void Signup_Request::clear_signupinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.signupinfo_ != nullptr) {
    delete _impl_.signupinfo_;
  }
  _impl_.signupinfo_ = nullptr;
}
inline const ::Login_Protobuf::Account& Signup_Request::_internal_signupinfo() const {
  const ::Login_Protobuf::Account* p = _impl_.signupinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Login_Protobuf::Account&>(
      ::Login_Protobuf::_Account_default_instance_);
}
inline const ::Login_Protobuf::Account& Signup_Request::signupinfo() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Signup_Request.Signupinfo)
  return _internal_signupinfo();
}
inline void Signup_Request::unsafe_arena_set_allocated_signupinfo(
    ::Login_Protobuf::Account* signupinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signupinfo_);
  }
  _impl_.signupinfo_ = signupinfo;
  if (signupinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Login_Protobuf.Signup_Request.Signupinfo)
}
inline ::Login_Protobuf::Account* Signup_Request::release_signupinfo() {
  
  ::Login_Protobuf::Account* temp = _impl_.signupinfo_;
  _impl_.signupinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Login_Protobuf::Account* Signup_Request::unsafe_arena_release_signupinfo() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Signup_Request.Signupinfo)
  
  ::Login_Protobuf::Account* temp = _impl_.signupinfo_;
  _impl_.signupinfo_ = nullptr;
  return temp;
}
inline ::Login_Protobuf::Account* Signup_Request::_internal_mutable_signupinfo() {
  
  if (_impl_.signupinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Login_Protobuf::Account>(GetArenaForAllocation());
    _impl_.signupinfo_ = p;
  }
  return _impl_.signupinfo_;
}
inline ::Login_Protobuf::Account* Signup_Request::mutable_signupinfo() {
  ::Login_Protobuf::Account* _msg = _internal_mutable_signupinfo();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Signup_Request.Signupinfo)
  return _msg;
}
inline void Signup_Request::set_allocated_signupinfo(::Login_Protobuf::Account* signupinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signupinfo_;
  }
  if (signupinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signupinfo);
    if (message_arena != submessage_arena) {
      signupinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signupinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.signupinfo_ = signupinfo;
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Signup_Request.Signupinfo)
}

// string Name = 2;
inline void Signup_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Signup_Request::name() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Signup_Request.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Signup_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login_Protobuf.Signup_Request.Name)
}
inline std::string* Signup_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Signup_Request.Name)
  return _s;
}
inline const std::string& Signup_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Signup_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Signup_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Signup_Request::release_name() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Signup_Request.Name)
  return _impl_.name_.Release();
}
inline void Signup_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Signup_Request.Name)
}

// -------------------------------------------------------------------

// Login_Response

// int32 result = 1;
inline void Login_Response::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t Login_Response::_internal_result() const {
  return _impl_.result_;
}
inline int32_t Login_Response::result() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Login_Response.result)
  return _internal_result();
}
inline void Login_Response::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void Login_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Login_Protobuf.Login_Response.result)
}

// string name = 2;
inline void Login_Response::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Login_Response::name() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Login_Response.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login_Response::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Login_Protobuf.Login_Response.name)
}
inline std::string* Login_Response::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Login_Protobuf.Login_Response.name)
  return _s;
}
inline const std::string& Login_Response::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Login_Response::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Login_Response::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Login_Response::release_name() {
  // @@protoc_insertion_point(field_release:Login_Protobuf.Login_Response.name)
  return _impl_.name_.Release();
}
inline void Login_Response::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Login_Protobuf.Login_Response.name)
}

// -------------------------------------------------------------------

// Signup_Response

// int32 result = 1;
inline void Signup_Response::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t Signup_Response::_internal_result() const {
  return _impl_.result_;
}
inline int32_t Signup_Response::result() const {
  // @@protoc_insertion_point(field_get:Login_Protobuf.Signup_Response.result)
  return _internal_result();
}
inline void Signup_Response::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void Signup_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Login_Protobuf.Signup_Response.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login_Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_5fProtocol_2eproto
