// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DS_Protocol.proto

#include "DS_Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DS_Protobuf {
PROTOBUF_CONSTEXPR DSPlayerinfo::DSPlayerinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playersname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.group_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DSPlayerinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DSPlayerinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DSPlayerinfoDefaultTypeInternal() {}
  union {
    DSPlayerinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DSPlayerinfoDefaultTypeInternal _DSPlayerinfo_default_instance_;
PROTOBUF_CONSTEXPR DSGameinfo::DSGameinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playersinfo_)*/{}
  , /*decltype(_impl_.playersnum_)*/0
  , /*decltype(_impl_.playerslimit_)*/0
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.hostid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DSGameinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DSGameinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DSGameinfoDefaultTypeInternal() {}
  union {
    DSGameinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DSGameinfoDefaultTypeInternal _DSGameinfo_default_instance_;
PROTOBUF_CONSTEXPR NewDSGame_Request::NewDSGame_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewDSGame_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewDSGame_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewDSGame_RequestDefaultTypeInternal() {}
  union {
    NewDSGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewDSGame_RequestDefaultTypeInternal _NewDSGame_Request_default_instance_;
PROTOBUF_CONSTEXPR NewDSGame_Response::NewDSGame_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewDSGame_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewDSGame_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewDSGame_ResponseDefaultTypeInternal() {}
  union {
    NewDSGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewDSGame_ResponseDefaultTypeInternal _NewDSGame_Response_default_instance_;
}  // namespace DS_Protobuf
static ::_pb::Metadata file_level_metadata_DS_5fProtocol_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_DS_5fProtocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_DS_5fProtocol_2eproto = nullptr;

const uint32_t TableStruct_DS_5fProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSPlayerinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSPlayerinfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSPlayerinfo, _impl_.playersname_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSPlayerinfo, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSPlayerinfo, _impl_.group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _impl_.playersnum_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _impl_.playerslimit_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _impl_.hostid_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::DSGameinfo, _impl_.playersinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::NewDSGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::NewDSGame_Request, _impl_.gameinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::NewDSGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::NewDSGame_Response, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::DS_Protobuf::NewDSGame_Response, _impl_.port_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DS_Protobuf::DSPlayerinfo)},
  { 10, -1, -1, sizeof(::DS_Protobuf::DSGameinfo)},
  { 21, -1, -1, sizeof(::DS_Protobuf::NewDSGame_Request)},
  { 28, -1, -1, sizeof(::DS_Protobuf::NewDSGame_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DS_Protobuf::_DSPlayerinfo_default_instance_._instance,
  &::DS_Protobuf::_DSGameinfo_default_instance_._instance,
  &::DS_Protobuf::_NewDSGame_Request_default_instance_._instance,
  &::DS_Protobuf::_NewDSGame_Response_default_instance_._instance,
};

const char descriptor_table_protodef_DS_5fProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021DS_Protocol.proto\022\013DS_Protobuf\"M\n\014DSPl"
  "ayerinfo\022\n\n\002id\030\001 \001(\005\022\023\n\013playersname\030\002 \001("
  "\t\022\r\n\005token\030\003 \001(\t\022\r\n\005group\030\004 \001(\005\"\205\001\n\nDSGa"
  "meinfo\022\022\n\nplayersnum\030\001 \001(\005\022\024\n\014playerslim"
  "it\030\002 \001(\005\022\r\n\005mapid\030\003 \001(\005\022\016\n\006hostid\030\004 \001(\005\022"
  ".\n\013playersinfo\030\005 \003(\0132\031.DS_Protobuf.DSPla"
  "yerinfo\">\n\021NewDSGame_Request\022)\n\010gameinfo"
  "\030\001 \001(\0132\027.DS_Protobuf.DSGameinfo\"2\n\022NewDS"
  "Game_Response\022\016\n\006result\030\001 \001(\005\022\014\n\004Port\030\002 "
  "\001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_DS_5fProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DS_5fProtocol_2eproto = {
    false, false, 371, descriptor_table_protodef_DS_5fProtocol_2eproto,
    "DS_Protocol.proto",
    &descriptor_table_DS_5fProtocol_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_DS_5fProtocol_2eproto::offsets,
    file_level_metadata_DS_5fProtocol_2eproto, file_level_enum_descriptors_DS_5fProtocol_2eproto,
    file_level_service_descriptors_DS_5fProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DS_5fProtocol_2eproto_getter() {
  return &descriptor_table_DS_5fProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DS_5fProtocol_2eproto(&descriptor_table_DS_5fProtocol_2eproto);
namespace DS_Protobuf {

// ===================================================================

class DSPlayerinfo::_Internal {
 public:
};

DSPlayerinfo::DSPlayerinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DS_Protobuf.DSPlayerinfo)
}
DSPlayerinfo::DSPlayerinfo(const DSPlayerinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DSPlayerinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playersname_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playersname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playersname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playersname().empty()) {
    _this->_impl_.playersname_.Set(from._internal_playersname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.group_));
  // @@protoc_insertion_point(copy_constructor:DS_Protobuf.DSPlayerinfo)
}

inline void DSPlayerinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playersname_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.group_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playersname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playersname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DSPlayerinfo::~DSPlayerinfo() {
  // @@protoc_insertion_point(destructor:DS_Protobuf.DSPlayerinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DSPlayerinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playersname_.Destroy();
  _impl_.token_.Destroy();
}

void DSPlayerinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DSPlayerinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DS_Protobuf.DSPlayerinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playersname_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.group_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSPlayerinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playersname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playersname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DS_Protobuf.DSPlayerinfo.playersname"));
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DS_Protobuf.DSPlayerinfo.token"));
        } else
          goto handle_unusual;
        continue;
      // int32 group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DSPlayerinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS_Protobuf.DSPlayerinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string playersname = 2;
  if (!this->_internal_playersname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersname().data(), static_cast<int>(this->_internal_playersname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DS_Protobuf.DSPlayerinfo.playersname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersname(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DS_Protobuf.DSPlayerinfo.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // int32 group = 4;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS_Protobuf.DSPlayerinfo)
  return target;
}

size_t DSPlayerinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DS_Protobuf.DSPlayerinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playersname = 2;
  if (!this->_internal_playersname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersname());
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 group = 4;
  if (this->_internal_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DSPlayerinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DSPlayerinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DSPlayerinfo::GetClassData() const { return &_class_data_; }


void DSPlayerinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DSPlayerinfo*>(&to_msg);
  auto& from = static_cast<const DSPlayerinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DS_Protobuf.DSPlayerinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playersname().empty()) {
    _this->_internal_set_playersname(from._internal_playersname());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DSPlayerinfo::CopyFrom(const DSPlayerinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DS_Protobuf.DSPlayerinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPlayerinfo::IsInitialized() const {
  return true;
}

void DSPlayerinfo::InternalSwap(DSPlayerinfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playersname_, lhs_arena,
      &other->_impl_.playersname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DSPlayerinfo, _impl_.group_)
      + sizeof(DSPlayerinfo::_impl_.group_)
      - PROTOBUF_FIELD_OFFSET(DSPlayerinfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DSPlayerinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DS_5fProtocol_2eproto_getter, &descriptor_table_DS_5fProtocol_2eproto_once,
      file_level_metadata_DS_5fProtocol_2eproto[0]);
}

// ===================================================================

class DSGameinfo::_Internal {
 public:
};

DSGameinfo::DSGameinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DS_Protobuf.DSGameinfo)
}
DSGameinfo::DSGameinfo(const DSGameinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DSGameinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playersinfo_){from._impl_.playersinfo_}
    , decltype(_impl_.playersnum_){}
    , decltype(_impl_.playerslimit_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.hostid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playersnum_, &from._impl_.playersnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hostid_) -
    reinterpret_cast<char*>(&_impl_.playersnum_)) + sizeof(_impl_.hostid_));
  // @@protoc_insertion_point(copy_constructor:DS_Protobuf.DSGameinfo)
}

inline void DSGameinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playersinfo_){arena}
    , decltype(_impl_.playersnum_){0}
    , decltype(_impl_.playerslimit_){0}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.hostid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DSGameinfo::~DSGameinfo() {
  // @@protoc_insertion_point(destructor:DS_Protobuf.DSGameinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DSGameinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playersinfo_.~RepeatedPtrField();
}

void DSGameinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DSGameinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DS_Protobuf.DSGameinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playersinfo_.Clear();
  ::memset(&_impl_.playersnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hostid_) -
      reinterpret_cast<char*>(&_impl_.playersnum_)) + sizeof(_impl_.hostid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSGameinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playersnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playersnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerslimit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerslimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mapid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hostid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hostid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .DS_Protobuf.DSPlayerinfo playersinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playersinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DSGameinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS_Protobuf.DSGameinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playersnum = 1;
  if (this->_internal_playersnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playersnum(), target);
  }

  // int32 playerslimit = 2;
  if (this->_internal_playerslimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerslimit(), target);
  }

  // int32 mapid = 3;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mapid(), target);
  }

  // int32 hostid = 4;
  if (this->_internal_hostid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hostid(), target);
  }

  // repeated .DS_Protobuf.DSPlayerinfo playersinfo = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playersinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_playersinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS_Protobuf.DSGameinfo)
  return target;
}

size_t DSGameinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DS_Protobuf.DSGameinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DS_Protobuf.DSPlayerinfo playersinfo = 5;
  total_size += 1UL * this->_internal_playersinfo_size();
  for (const auto& msg : this->_impl_.playersinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 playersnum = 1;
  if (this->_internal_playersnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playersnum());
  }

  // int32 playerslimit = 2;
  if (this->_internal_playerslimit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerslimit());
  }

  // int32 mapid = 3;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 hostid = 4;
  if (this->_internal_hostid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hostid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DSGameinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DSGameinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DSGameinfo::GetClassData() const { return &_class_data_; }


void DSGameinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DSGameinfo*>(&to_msg);
  auto& from = static_cast<const DSGameinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DS_Protobuf.DSGameinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playersinfo_.MergeFrom(from._impl_.playersinfo_);
  if (from._internal_playersnum() != 0) {
    _this->_internal_set_playersnum(from._internal_playersnum());
  }
  if (from._internal_playerslimit() != 0) {
    _this->_internal_set_playerslimit(from._internal_playerslimit());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_hostid() != 0) {
    _this->_internal_set_hostid(from._internal_hostid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DSGameinfo::CopyFrom(const DSGameinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DS_Protobuf.DSGameinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSGameinfo::IsInitialized() const {
  return true;
}

void DSGameinfo::InternalSwap(DSGameinfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playersinfo_.InternalSwap(&other->_impl_.playersinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DSGameinfo, _impl_.hostid_)
      + sizeof(DSGameinfo::_impl_.hostid_)
      - PROTOBUF_FIELD_OFFSET(DSGameinfo, _impl_.playersnum_)>(
          reinterpret_cast<char*>(&_impl_.playersnum_),
          reinterpret_cast<char*>(&other->_impl_.playersnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DSGameinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DS_5fProtocol_2eproto_getter, &descriptor_table_DS_5fProtocol_2eproto_once,
      file_level_metadata_DS_5fProtocol_2eproto[1]);
}

// ===================================================================

class NewDSGame_Request::_Internal {
 public:
  static const ::DS_Protobuf::DSGameinfo& gameinfo(const NewDSGame_Request* msg);
};

const ::DS_Protobuf::DSGameinfo&
NewDSGame_Request::_Internal::gameinfo(const NewDSGame_Request* msg) {
  return *msg->_impl_.gameinfo_;
}
NewDSGame_Request::NewDSGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DS_Protobuf.NewDSGame_Request)
}
NewDSGame_Request::NewDSGame_Request(const NewDSGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewDSGame_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gameinfo()) {
    _this->_impl_.gameinfo_ = new ::DS_Protobuf::DSGameinfo(*from._impl_.gameinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:DS_Protobuf.NewDSGame_Request)
}

inline void NewDSGame_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NewDSGame_Request::~NewDSGame_Request() {
  // @@protoc_insertion_point(destructor:DS_Protobuf.NewDSGame_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewDSGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gameinfo_;
}

void NewDSGame_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewDSGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:DS_Protobuf.NewDSGame_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.gameinfo_ != nullptr) {
    delete _impl_.gameinfo_;
  }
  _impl_.gameinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewDSGame_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DS_Protobuf.DSGameinfo gameinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewDSGame_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS_Protobuf.NewDSGame_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DS_Protobuf.DSGameinfo gameinfo = 1;
  if (this->_internal_has_gameinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gameinfo(this),
        _Internal::gameinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS_Protobuf.NewDSGame_Request)
  return target;
}

size_t NewDSGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DS_Protobuf.NewDSGame_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DS_Protobuf.DSGameinfo gameinfo = 1;
  if (this->_internal_has_gameinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gameinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewDSGame_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewDSGame_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewDSGame_Request::GetClassData() const { return &_class_data_; }


void NewDSGame_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewDSGame_Request*>(&to_msg);
  auto& from = static_cast<const NewDSGame_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DS_Protobuf.NewDSGame_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gameinfo()) {
    _this->_internal_mutable_gameinfo()->::DS_Protobuf::DSGameinfo::MergeFrom(
        from._internal_gameinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewDSGame_Request::CopyFrom(const NewDSGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DS_Protobuf.NewDSGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDSGame_Request::IsInitialized() const {
  return true;
}

void NewDSGame_Request::InternalSwap(NewDSGame_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gameinfo_, other->_impl_.gameinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewDSGame_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DS_5fProtocol_2eproto_getter, &descriptor_table_DS_5fProtocol_2eproto_once,
      file_level_metadata_DS_5fProtocol_2eproto[2]);
}

// ===================================================================

class NewDSGame_Response::_Internal {
 public:
};

NewDSGame_Response::NewDSGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DS_Protobuf.NewDSGame_Response)
}
NewDSGame_Response::NewDSGame_Response(const NewDSGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewDSGame_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:DS_Protobuf.NewDSGame_Response)
}

inline void NewDSGame_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NewDSGame_Response::~NewDSGame_Response() {
  // @@protoc_insertion_point(destructor:DS_Protobuf.NewDSGame_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewDSGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewDSGame_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewDSGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:DS_Protobuf.NewDSGame_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewDSGame_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewDSGame_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DS_Protobuf.NewDSGame_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 Port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DS_Protobuf.NewDSGame_Response)
  return target;
}

size_t NewDSGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DS_Protobuf.NewDSGame_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 Port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewDSGame_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewDSGame_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewDSGame_Response::GetClassData() const { return &_class_data_; }


void NewDSGame_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewDSGame_Response*>(&to_msg);
  auto& from = static_cast<const NewDSGame_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DS_Protobuf.NewDSGame_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewDSGame_Response::CopyFrom(const NewDSGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DS_Protobuf.NewDSGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDSGame_Response::IsInitialized() const {
  return true;
}

void NewDSGame_Response::InternalSwap(NewDSGame_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewDSGame_Response, _impl_.port_)
      + sizeof(NewDSGame_Response::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(NewDSGame_Response, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewDSGame_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DS_5fProtocol_2eproto_getter, &descriptor_table_DS_5fProtocol_2eproto_once,
      file_level_metadata_DS_5fProtocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DS_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DS_Protobuf::DSPlayerinfo*
Arena::CreateMaybeMessage< ::DS_Protobuf::DSPlayerinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DS_Protobuf::DSPlayerinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DS_Protobuf::DSGameinfo*
Arena::CreateMaybeMessage< ::DS_Protobuf::DSGameinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DS_Protobuf::DSGameinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DS_Protobuf::NewDSGame_Request*
Arena::CreateMaybeMessage< ::DS_Protobuf::NewDSGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DS_Protobuf::NewDSGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::DS_Protobuf::NewDSGame_Response*
Arena::CreateMaybeMessage< ::DS_Protobuf::NewDSGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DS_Protobuf::NewDSGame_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
