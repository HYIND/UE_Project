// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game_Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_5fProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_5fProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_5fProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_5fProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_5fProtocol_2eproto;
namespace Game_Protobuf {
class Gameinfo;
struct GameinfoDefaultTypeInternal;
extern GameinfoDefaultTypeInternal _Gameinfo_default_instance_;
class NewGame_Request;
struct NewGame_RequestDefaultTypeInternal;
extern NewGame_RequestDefaultTypeInternal _NewGame_Request_default_instance_;
class NewGame_Response;
struct NewGame_ResponseDefaultTypeInternal;
extern NewGame_ResponseDefaultTypeInternal _NewGame_Response_default_instance_;
class PlayerAllinfo;
struct PlayerAllinfoDefaultTypeInternal;
extern PlayerAllinfoDefaultTypeInternal _PlayerAllinfo_default_instance_;
}  // namespace Game_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Game_Protobuf::Gameinfo* Arena::CreateMaybeMessage<::Game_Protobuf::Gameinfo>(Arena*);
template<> ::Game_Protobuf::NewGame_Request* Arena::CreateMaybeMessage<::Game_Protobuf::NewGame_Request>(Arena*);
template<> ::Game_Protobuf::NewGame_Response* Arena::CreateMaybeMessage<::Game_Protobuf::NewGame_Response>(Arena*);
template<> ::Game_Protobuf::PlayerAllinfo* Arena::CreateMaybeMessage<::Game_Protobuf::PlayerAllinfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Game_Protobuf {

// ===================================================================

class Gameinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game_Protobuf.Gameinfo) */ {
 public:
  inline Gameinfo() : Gameinfo(nullptr) {}
  ~Gameinfo() override;
  explicit PROTOBUF_CONSTEXPR Gameinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gameinfo(const Gameinfo& from);
  Gameinfo(Gameinfo&& from) noexcept
    : Gameinfo() {
    *this = ::std::move(from);
  }

  inline Gameinfo& operator=(const Gameinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gameinfo& operator=(Gameinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gameinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gameinfo* internal_default_instance() {
    return reinterpret_cast<const Gameinfo*>(
               &_Gameinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gameinfo& a, Gameinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Gameinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gameinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gameinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gameinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gameinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Gameinfo& from) {
    Gameinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gameinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game_Protobuf.Gameinfo";
  }
  protected:
  explicit Gameinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersallinfoFieldNumber = 6,
    kRoomidFieldNumber = 1,
    kPlayersnumFieldNumber = 2,
    kPlayerslimitFieldNumber = 3,
    kMapidFieldNumber = 4,
    kHostidFieldNumber = 5,
  };
  // repeated .Game_Protobuf.PlayerAllinfo playersallinfo = 6;
  int playersallinfo_size() const;
  private:
  int _internal_playersallinfo_size() const;
  public:
  void clear_playersallinfo();
  ::Game_Protobuf::PlayerAllinfo* mutable_playersallinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Game_Protobuf::PlayerAllinfo >*
      mutable_playersallinfo();
  private:
  const ::Game_Protobuf::PlayerAllinfo& _internal_playersallinfo(int index) const;
  ::Game_Protobuf::PlayerAllinfo* _internal_add_playersallinfo();
  public:
  const ::Game_Protobuf::PlayerAllinfo& playersallinfo(int index) const;
  ::Game_Protobuf::PlayerAllinfo* add_playersallinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Game_Protobuf::PlayerAllinfo >&
      playersallinfo() const;

  // int32 roomid = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // int32 playersnum = 2;
  void clear_playersnum();
  int32_t playersnum() const;
  void set_playersnum(int32_t value);
  private:
  int32_t _internal_playersnum() const;
  void _internal_set_playersnum(int32_t value);
  public:

  // int32 playerslimit = 3;
  void clear_playerslimit();
  int32_t playerslimit() const;
  void set_playerslimit(int32_t value);
  private:
  int32_t _internal_playerslimit() const;
  void _internal_set_playerslimit(int32_t value);
  public:

  // int32 mapid = 4;
  void clear_mapid();
  int32_t mapid() const;
  void set_mapid(int32_t value);
  private:
  int32_t _internal_mapid() const;
  void _internal_set_mapid(int32_t value);
  public:

  // int32 hostid = 5;
  void clear_hostid();
  int32_t hostid() const;
  void set_hostid(int32_t value);
  private:
  int32_t _internal_hostid() const;
  void _internal_set_hostid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Game_Protobuf.Gameinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Game_Protobuf::PlayerAllinfo > playersallinfo_;
    int32_t roomid_;
    int32_t playersnum_;
    int32_t playerslimit_;
    int32_t mapid_;
    int32_t hostid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Game_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class PlayerAllinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game_Protobuf.PlayerAllinfo) */ {
 public:
  inline PlayerAllinfo() : PlayerAllinfo(nullptr) {}
  ~PlayerAllinfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerAllinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAllinfo(const PlayerAllinfo& from);
  PlayerAllinfo(PlayerAllinfo&& from) noexcept
    : PlayerAllinfo() {
    *this = ::std::move(from);
  }

  inline PlayerAllinfo& operator=(const PlayerAllinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAllinfo& operator=(PlayerAllinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAllinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAllinfo* internal_default_instance() {
    return reinterpret_cast<const PlayerAllinfo*>(
               &_PlayerAllinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerAllinfo& a, PlayerAllinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAllinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAllinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAllinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAllinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerAllinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerAllinfo& from) {
    PlayerAllinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAllinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game_Protobuf.PlayerAllinfo";
  }
  protected:
  explicit PlayerAllinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersnameFieldNumber = 2,
    kTokenFieldNumber = 3,
    kIdFieldNumber = 1,
    kGroupFieldNumber = 4,
  };
  // string playersname = 2;
  void clear_playersname();
  const std::string& playersname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playersname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playersname();
  PROTOBUF_NODISCARD std::string* release_playersname();
  void set_allocated_playersname(std::string* playersname);
  private:
  const std::string& _internal_playersname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playersname(const std::string& value);
  std::string* _internal_mutable_playersname();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 group = 4;
  void clear_group();
  int32_t group() const;
  void set_group(int32_t value);
  private:
  int32_t _internal_group() const;
  void _internal_set_group(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Game_Protobuf.PlayerAllinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t id_;
    int32_t group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Game_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class NewGame_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game_Protobuf.NewGame_Request) */ {
 public:
  inline NewGame_Request() : NewGame_Request(nullptr) {}
  ~NewGame_Request() override;
  explicit PROTOBUF_CONSTEXPR NewGame_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewGame_Request(const NewGame_Request& from);
  NewGame_Request(NewGame_Request&& from) noexcept
    : NewGame_Request() {
    *this = ::std::move(from);
  }

  inline NewGame_Request& operator=(const NewGame_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGame_Request& operator=(NewGame_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewGame_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGame_Request* internal_default_instance() {
    return reinterpret_cast<const NewGame_Request*>(
               &_NewGame_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewGame_Request& a, NewGame_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGame_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGame_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewGame_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewGame_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewGame_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewGame_Request& from) {
    NewGame_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGame_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game_Protobuf.NewGame_Request";
  }
  protected:
  explicit NewGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameinfoFieldNumber = 1,
  };
  // .Game_Protobuf.Gameinfo gameinfo = 1;
  bool has_gameinfo() const;
  private:
  bool _internal_has_gameinfo() const;
  public:
  void clear_gameinfo();
  const ::Game_Protobuf::Gameinfo& gameinfo() const;
  PROTOBUF_NODISCARD ::Game_Protobuf::Gameinfo* release_gameinfo();
  ::Game_Protobuf::Gameinfo* mutable_gameinfo();
  void set_allocated_gameinfo(::Game_Protobuf::Gameinfo* gameinfo);
  private:
  const ::Game_Protobuf::Gameinfo& _internal_gameinfo() const;
  ::Game_Protobuf::Gameinfo* _internal_mutable_gameinfo();
  public:
  void unsafe_arena_set_allocated_gameinfo(
      ::Game_Protobuf::Gameinfo* gameinfo);
  ::Game_Protobuf::Gameinfo* unsafe_arena_release_gameinfo();

  // @@protoc_insertion_point(class_scope:Game_Protobuf.NewGame_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Game_Protobuf::Gameinfo* gameinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Game_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class NewGame_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Game_Protobuf.NewGame_Response) */ {
 public:
  inline NewGame_Response() : NewGame_Response(nullptr) {}
  ~NewGame_Response() override;
  explicit PROTOBUF_CONSTEXPR NewGame_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewGame_Response(const NewGame_Response& from);
  NewGame_Response(NewGame_Response&& from) noexcept
    : NewGame_Response() {
    *this = ::std::move(from);
  }

  inline NewGame_Response& operator=(const NewGame_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGame_Response& operator=(NewGame_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewGame_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGame_Response* internal_default_instance() {
    return reinterpret_cast<const NewGame_Response*>(
               &_NewGame_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NewGame_Response& a, NewGame_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGame_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGame_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewGame_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewGame_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewGame_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewGame_Response& from) {
    NewGame_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGame_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Game_Protobuf.NewGame_Response";
  }
  protected:
  explicit NewGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDSIPFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string DS_IP = 2;
  void clear_ds_ip();
  const std::string& ds_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ds_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ds_ip();
  PROTOBUF_NODISCARD std::string* release_ds_ip();
  void set_allocated_ds_ip(std::string* ds_ip);
  private:
  const std::string& _internal_ds_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ds_ip(const std::string& value);
  std::string* _internal_mutable_ds_ip();
  public:

  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Game_Protobuf.NewGame_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ds_ip_;
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Game_5fProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gameinfo

// int32 roomid = 1;
inline void Gameinfo::clear_roomid() {
  _impl_.roomid_ = 0;
}
inline int32_t Gameinfo::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int32_t Gameinfo::roomid() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.roomid)
  return _internal_roomid();
}
inline void Gameinfo::_internal_set_roomid(int32_t value) {
  
  _impl_.roomid_ = value;
}
inline void Gameinfo::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.Gameinfo.roomid)
}

// int32 playersnum = 2;
inline void Gameinfo::clear_playersnum() {
  _impl_.playersnum_ = 0;
}
inline int32_t Gameinfo::_internal_playersnum() const {
  return _impl_.playersnum_;
}
inline int32_t Gameinfo::playersnum() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.playersnum)
  return _internal_playersnum();
}
inline void Gameinfo::_internal_set_playersnum(int32_t value) {
  
  _impl_.playersnum_ = value;
}
inline void Gameinfo::set_playersnum(int32_t value) {
  _internal_set_playersnum(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.Gameinfo.playersnum)
}

// int32 playerslimit = 3;
inline void Gameinfo::clear_playerslimit() {
  _impl_.playerslimit_ = 0;
}
inline int32_t Gameinfo::_internal_playerslimit() const {
  return _impl_.playerslimit_;
}
inline int32_t Gameinfo::playerslimit() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.playerslimit)
  return _internal_playerslimit();
}
inline void Gameinfo::_internal_set_playerslimit(int32_t value) {
  
  _impl_.playerslimit_ = value;
}
inline void Gameinfo::set_playerslimit(int32_t value) {
  _internal_set_playerslimit(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.Gameinfo.playerslimit)
}

// int32 mapid = 4;
inline void Gameinfo::clear_mapid() {
  _impl_.mapid_ = 0;
}
inline int32_t Gameinfo::_internal_mapid() const {
  return _impl_.mapid_;
}
inline int32_t Gameinfo::mapid() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.mapid)
  return _internal_mapid();
}
inline void Gameinfo::_internal_set_mapid(int32_t value) {
  
  _impl_.mapid_ = value;
}
inline void Gameinfo::set_mapid(int32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.Gameinfo.mapid)
}

// int32 hostid = 5;
inline void Gameinfo::clear_hostid() {
  _impl_.hostid_ = 0;
}
inline int32_t Gameinfo::_internal_hostid() const {
  return _impl_.hostid_;
}
inline int32_t Gameinfo::hostid() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.hostid)
  return _internal_hostid();
}
inline void Gameinfo::_internal_set_hostid(int32_t value) {
  
  _impl_.hostid_ = value;
}
inline void Gameinfo::set_hostid(int32_t value) {
  _internal_set_hostid(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.Gameinfo.hostid)
}

// repeated .Game_Protobuf.PlayerAllinfo playersallinfo = 6;
inline int Gameinfo::_internal_playersallinfo_size() const {
  return _impl_.playersallinfo_.size();
}
inline int Gameinfo::playersallinfo_size() const {
  return _internal_playersallinfo_size();
}
inline void Gameinfo::clear_playersallinfo() {
  _impl_.playersallinfo_.Clear();
}
inline ::Game_Protobuf::PlayerAllinfo* Gameinfo::mutable_playersallinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Game_Protobuf.Gameinfo.playersallinfo)
  return _impl_.playersallinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Game_Protobuf::PlayerAllinfo >*
Gameinfo::mutable_playersallinfo() {
  // @@protoc_insertion_point(field_mutable_list:Game_Protobuf.Gameinfo.playersallinfo)
  return &_impl_.playersallinfo_;
}
inline const ::Game_Protobuf::PlayerAllinfo& Gameinfo::_internal_playersallinfo(int index) const {
  return _impl_.playersallinfo_.Get(index);
}
inline const ::Game_Protobuf::PlayerAllinfo& Gameinfo::playersallinfo(int index) const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.Gameinfo.playersallinfo)
  return _internal_playersallinfo(index);
}
inline ::Game_Protobuf::PlayerAllinfo* Gameinfo::_internal_add_playersallinfo() {
  return _impl_.playersallinfo_.Add();
}
inline ::Game_Protobuf::PlayerAllinfo* Gameinfo::add_playersallinfo() {
  ::Game_Protobuf::PlayerAllinfo* _add = _internal_add_playersallinfo();
  // @@protoc_insertion_point(field_add:Game_Protobuf.Gameinfo.playersallinfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Game_Protobuf::PlayerAllinfo >&
Gameinfo::playersallinfo() const {
  // @@protoc_insertion_point(field_list:Game_Protobuf.Gameinfo.playersallinfo)
  return _impl_.playersallinfo_;
}

// -------------------------------------------------------------------

// PlayerAllinfo

// int32 id = 1;
inline void PlayerAllinfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t PlayerAllinfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PlayerAllinfo::id() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.PlayerAllinfo.id)
  return _internal_id();
}
inline void PlayerAllinfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void PlayerAllinfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.PlayerAllinfo.id)
}

// string playersname = 2;
inline void PlayerAllinfo::clear_playersname() {
  _impl_.playersname_.ClearToEmpty();
}
inline const std::string& PlayerAllinfo::playersname() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.PlayerAllinfo.playersname)
  return _internal_playersname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerAllinfo::set_playersname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playersname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Game_Protobuf.PlayerAllinfo.playersname)
}
inline std::string* PlayerAllinfo::mutable_playersname() {
  std::string* _s = _internal_mutable_playersname();
  // @@protoc_insertion_point(field_mutable:Game_Protobuf.PlayerAllinfo.playersname)
  return _s;
}
inline const std::string& PlayerAllinfo::_internal_playersname() const {
  return _impl_.playersname_.Get();
}
inline void PlayerAllinfo::_internal_set_playersname(const std::string& value) {
  
  _impl_.playersname_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerAllinfo::_internal_mutable_playersname() {
  
  return _impl_.playersname_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerAllinfo::release_playersname() {
  // @@protoc_insertion_point(field_release:Game_Protobuf.PlayerAllinfo.playersname)
  return _impl_.playersname_.Release();
}
inline void PlayerAllinfo::set_allocated_playersname(std::string* playersname) {
  if (playersname != nullptr) {
    
  } else {
    
  }
  _impl_.playersname_.SetAllocated(playersname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playersname_.IsDefault()) {
    _impl_.playersname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Game_Protobuf.PlayerAllinfo.playersname)
}

// string token = 3;
inline void PlayerAllinfo::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& PlayerAllinfo::token() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.PlayerAllinfo.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerAllinfo::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Game_Protobuf.PlayerAllinfo.token)
}
inline std::string* PlayerAllinfo::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Game_Protobuf.PlayerAllinfo.token)
  return _s;
}
inline const std::string& PlayerAllinfo::_internal_token() const {
  return _impl_.token_.Get();
}
inline void PlayerAllinfo::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerAllinfo::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerAllinfo::release_token() {
  // @@protoc_insertion_point(field_release:Game_Protobuf.PlayerAllinfo.token)
  return _impl_.token_.Release();
}
inline void PlayerAllinfo::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Game_Protobuf.PlayerAllinfo.token)
}

// int32 group = 4;
inline void PlayerAllinfo::clear_group() {
  _impl_.group_ = 0;
}
inline int32_t PlayerAllinfo::_internal_group() const {
  return _impl_.group_;
}
inline int32_t PlayerAllinfo::group() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.PlayerAllinfo.group)
  return _internal_group();
}
inline void PlayerAllinfo::_internal_set_group(int32_t value) {
  
  _impl_.group_ = value;
}
inline void PlayerAllinfo::set_group(int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.PlayerAllinfo.group)
}

// -------------------------------------------------------------------

// NewGame_Request

// .Game_Protobuf.Gameinfo gameinfo = 1;
inline bool NewGame_Request::_internal_has_gameinfo() const {
  return this != internal_default_instance() && _impl_.gameinfo_ != nullptr;
}
inline bool NewGame_Request::has_gameinfo() const {
  return _internal_has_gameinfo();
}
inline void NewGame_Request::clear_gameinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.gameinfo_ != nullptr) {
    delete _impl_.gameinfo_;
  }
  _impl_.gameinfo_ = nullptr;
}
inline const ::Game_Protobuf::Gameinfo& NewGame_Request::_internal_gameinfo() const {
  const ::Game_Protobuf::Gameinfo* p = _impl_.gameinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Game_Protobuf::Gameinfo&>(
      ::Game_Protobuf::_Gameinfo_default_instance_);
}
inline const ::Game_Protobuf::Gameinfo& NewGame_Request::gameinfo() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.NewGame_Request.gameinfo)
  return _internal_gameinfo();
}
inline void NewGame_Request::unsafe_arena_set_allocated_gameinfo(
    ::Game_Protobuf::Gameinfo* gameinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gameinfo_);
  }
  _impl_.gameinfo_ = gameinfo;
  if (gameinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Game_Protobuf.NewGame_Request.gameinfo)
}
inline ::Game_Protobuf::Gameinfo* NewGame_Request::release_gameinfo() {
  
  ::Game_Protobuf::Gameinfo* temp = _impl_.gameinfo_;
  _impl_.gameinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Game_Protobuf::Gameinfo* NewGame_Request::unsafe_arena_release_gameinfo() {
  // @@protoc_insertion_point(field_release:Game_Protobuf.NewGame_Request.gameinfo)
  
  ::Game_Protobuf::Gameinfo* temp = _impl_.gameinfo_;
  _impl_.gameinfo_ = nullptr;
  return temp;
}
inline ::Game_Protobuf::Gameinfo* NewGame_Request::_internal_mutable_gameinfo() {
  
  if (_impl_.gameinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Game_Protobuf::Gameinfo>(GetArenaForAllocation());
    _impl_.gameinfo_ = p;
  }
  return _impl_.gameinfo_;
}
inline ::Game_Protobuf::Gameinfo* NewGame_Request::mutable_gameinfo() {
  ::Game_Protobuf::Gameinfo* _msg = _internal_mutable_gameinfo();
  // @@protoc_insertion_point(field_mutable:Game_Protobuf.NewGame_Request.gameinfo)
  return _msg;
}
inline void NewGame_Request::set_allocated_gameinfo(::Game_Protobuf::Gameinfo* gameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gameinfo_;
  }
  if (gameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gameinfo);
    if (message_arena != submessage_arena) {
      gameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gameinfo_ = gameinfo;
  // @@protoc_insertion_point(field_set_allocated:Game_Protobuf.NewGame_Request.gameinfo)
}

// -------------------------------------------------------------------

// NewGame_Response

// int32 result = 1;
inline void NewGame_Response::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t NewGame_Response::_internal_result() const {
  return _impl_.result_;
}
inline int32_t NewGame_Response::result() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.NewGame_Response.result)
  return _internal_result();
}
inline void NewGame_Response::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void NewGame_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Game_Protobuf.NewGame_Response.result)
}

// string DS_IP = 2;
inline void NewGame_Response::clear_ds_ip() {
  _impl_.ds_ip_.ClearToEmpty();
}
inline const std::string& NewGame_Response::ds_ip() const {
  // @@protoc_insertion_point(field_get:Game_Protobuf.NewGame_Response.DS_IP)
  return _internal_ds_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewGame_Response::set_ds_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ds_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Game_Protobuf.NewGame_Response.DS_IP)
}
inline std::string* NewGame_Response::mutable_ds_ip() {
  std::string* _s = _internal_mutable_ds_ip();
  // @@protoc_insertion_point(field_mutable:Game_Protobuf.NewGame_Response.DS_IP)
  return _s;
}
inline const std::string& NewGame_Response::_internal_ds_ip() const {
  return _impl_.ds_ip_.Get();
}
inline void NewGame_Response::_internal_set_ds_ip(const std::string& value) {
  
  _impl_.ds_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* NewGame_Response::_internal_mutable_ds_ip() {
  
  return _impl_.ds_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* NewGame_Response::release_ds_ip() {
  // @@protoc_insertion_point(field_release:Game_Protobuf.NewGame_Response.DS_IP)
  return _impl_.ds_ip_.Release();
}
inline void NewGame_Response::set_allocated_ds_ip(std::string* ds_ip) {
  if (ds_ip != nullptr) {
    
  } else {
    
  }
  _impl_.ds_ip_.SetAllocated(ds_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ds_ip_.IsDefault()) {
    _impl_.ds_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Game_Protobuf.NewGame_Response.DS_IP)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game_Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_5fProtocol_2eproto
