// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Room_Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Room_5fProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Room_5fProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Room_5fProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Room_5fProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Room_5fProtocol_2eproto;
namespace Room_Protobuf {
class RoomInfo_Response;
struct RoomInfo_ResponseDefaultTypeInternal;
extern RoomInfo_ResponseDefaultTypeInternal _RoomInfo_Response_default_instance_;
class RoomInfo_Response_User;
struct RoomInfo_Response_UserDefaultTypeInternal;
extern RoomInfo_Response_UserDefaultTypeInternal _RoomInfo_Response_User_default_instance_;
class RoomMessage_Request;
struct RoomMessage_RequestDefaultTypeInternal;
extern RoomMessage_RequestDefaultTypeInternal _RoomMessage_Request_default_instance_;
class RoomMessage_Response;
struct RoomMessage_ResponseDefaultTypeInternal;
extern RoomMessage_ResponseDefaultTypeInternal _RoomMessage_Response_default_instance_;
class Start_Response;
struct Start_ResponseDefaultTypeInternal;
extern Start_ResponseDefaultTypeInternal _Start_Response_default_instance_;
}  // namespace Room_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Room_Protobuf::RoomInfo_Response* Arena::CreateMaybeMessage<::Room_Protobuf::RoomInfo_Response>(Arena*);
template<> ::Room_Protobuf::RoomInfo_Response_User* Arena::CreateMaybeMessage<::Room_Protobuf::RoomInfo_Response_User>(Arena*);
template<> ::Room_Protobuf::RoomMessage_Request* Arena::CreateMaybeMessage<::Room_Protobuf::RoomMessage_Request>(Arena*);
template<> ::Room_Protobuf::RoomMessage_Response* Arena::CreateMaybeMessage<::Room_Protobuf::RoomMessage_Response>(Arena*);
template<> ::Room_Protobuf::Start_Response* Arena::CreateMaybeMessage<::Room_Protobuf::Start_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Room_Protobuf {

// ===================================================================

class RoomInfo_Response_User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room_Protobuf.RoomInfo_Response.User) */ {
 public:
  inline RoomInfo_Response_User() : RoomInfo_Response_User(nullptr) {}
  ~RoomInfo_Response_User() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo_Response_User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo_Response_User(const RoomInfo_Response_User& from);
  RoomInfo_Response_User(RoomInfo_Response_User&& from) noexcept
    : RoomInfo_Response_User() {
    *this = ::std::move(from);
  }

  inline RoomInfo_Response_User& operator=(const RoomInfo_Response_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo_Response_User& operator=(RoomInfo_Response_User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo_Response_User& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo_Response_User* internal_default_instance() {
    return reinterpret_cast<const RoomInfo_Response_User*>(
               &_RoomInfo_Response_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomInfo_Response_User& a, RoomInfo_Response_User& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo_Response_User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo_Response_User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo_Response_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo_Response_User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo_Response_User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo_Response_User& from) {
    RoomInfo_Response_User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo_Response_User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room_Protobuf.RoomInfo_Response.User";
  }
  protected:
  explicit RoomInfo_Response_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Room_Protobuf.RoomInfo_Response.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Room_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room_Protobuf.RoomInfo_Response) */ {
 public:
  inline RoomInfo_Response() : RoomInfo_Response(nullptr) {}
  ~RoomInfo_Response() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo_Response(const RoomInfo_Response& from);
  RoomInfo_Response(RoomInfo_Response&& from) noexcept
    : RoomInfo_Response() {
    *this = ::std::move(from);
  }

  inline RoomInfo_Response& operator=(const RoomInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo_Response& operator=(RoomInfo_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo_Response* internal_default_instance() {
    return reinterpret_cast<const RoomInfo_Response*>(
               &_RoomInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomInfo_Response& a, RoomInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo_Response& from) {
    RoomInfo_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room_Protobuf.RoomInfo_Response";
  }
  protected:
  explicit RoomInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoomInfo_Response_User User;

  // accessors -------------------------------------------------------

  enum : int {
    kUserinfoFieldNumber = 1,
  };
  // repeated .Room_Protobuf.RoomInfo_Response.User userinfo = 1;
  int userinfo_size() const;
  private:
  int _internal_userinfo_size() const;
  public:
  void clear_userinfo();
  ::Room_Protobuf::RoomInfo_Response_User* mutable_userinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room_Protobuf::RoomInfo_Response_User >*
      mutable_userinfo();
  private:
  const ::Room_Protobuf::RoomInfo_Response_User& _internal_userinfo(int index) const;
  ::Room_Protobuf::RoomInfo_Response_User* _internal_add_userinfo();
  public:
  const ::Room_Protobuf::RoomInfo_Response_User& userinfo(int index) const;
  ::Room_Protobuf::RoomInfo_Response_User* add_userinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room_Protobuf::RoomInfo_Response_User >&
      userinfo() const;

  // @@protoc_insertion_point(class_scope:Room_Protobuf.RoomInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room_Protobuf::RoomInfo_Response_User > userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Room_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class RoomMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room_Protobuf.RoomMessage_Request) */ {
 public:
  inline RoomMessage_Request() : RoomMessage_Request(nullptr) {}
  ~RoomMessage_Request() override;
  explicit PROTOBUF_CONSTEXPR RoomMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomMessage_Request(const RoomMessage_Request& from);
  RoomMessage_Request(RoomMessage_Request&& from) noexcept
    : RoomMessage_Request() {
    *this = ::std::move(from);
  }

  inline RoomMessage_Request& operator=(const RoomMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMessage_Request& operator=(RoomMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomMessage_Request* internal_default_instance() {
    return reinterpret_cast<const RoomMessage_Request*>(
               &_RoomMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomMessage_Request& a, RoomMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomMessage_Request& from) {
    RoomMessage_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room_Protobuf.RoomMessage_Request";
  }
  protected:
  explicit RoomMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Room_Protobuf.RoomMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Room_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class RoomMessage_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room_Protobuf.RoomMessage_Response) */ {
 public:
  inline RoomMessage_Response() : RoomMessage_Response(nullptr) {}
  ~RoomMessage_Response() override;
  explicit PROTOBUF_CONSTEXPR RoomMessage_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomMessage_Response(const RoomMessage_Response& from);
  RoomMessage_Response(RoomMessage_Response&& from) noexcept
    : RoomMessage_Response() {
    *this = ::std::move(from);
  }

  inline RoomMessage_Response& operator=(const RoomMessage_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMessage_Response& operator=(RoomMessage_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomMessage_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomMessage_Response* internal_default_instance() {
    return reinterpret_cast<const RoomMessage_Response*>(
               &_RoomMessage_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomMessage_Response& a, RoomMessage_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMessage_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMessage_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomMessage_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomMessage_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomMessage_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomMessage_Response& from) {
    RoomMessage_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMessage_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room_Protobuf.RoomMessage_Response";
  }
  protected:
  explicit RoomMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Room_Protobuf.RoomMessage_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Room_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Start_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room_Protobuf.Start_Response) */ {
 public:
  inline Start_Response() : Start_Response(nullptr) {}
  ~Start_Response() override;
  explicit PROTOBUF_CONSTEXPR Start_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Start_Response(const Start_Response& from);
  Start_Response(Start_Response&& from) noexcept
    : Start_Response() {
    *this = ::std::move(from);
  }

  inline Start_Response& operator=(const Start_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start_Response& operator=(Start_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start_Response* internal_default_instance() {
    return reinterpret_cast<const Start_Response*>(
               &_Start_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Start_Response& a, Start_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Start_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Start_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Start_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Start_Response& from) {
    Start_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Start_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room_Protobuf.Start_Response";
  }
  protected:
  explicit Start_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Room_Protobuf.Start_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Room_5fProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomInfo_Response_User

// string name = 1;
inline void RoomInfo_Response_User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoomInfo_Response_User::name() const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.RoomInfo_Response.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo_Response_User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Room_Protobuf.RoomInfo_Response.User.name)
}
inline std::string* RoomInfo_Response_User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Room_Protobuf.RoomInfo_Response.User.name)
  return _s;
}
inline const std::string& RoomInfo_Response_User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoomInfo_Response_User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo_Response_User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo_Response_User::release_name() {
  // @@protoc_insertion_point(field_release:Room_Protobuf.RoomInfo_Response.User.name)
  return _impl_.name_.Release();
}
inline void RoomInfo_Response_User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Room_Protobuf.RoomInfo_Response.User.name)
}

// int32 status = 2;
inline void RoomInfo_Response_User::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t RoomInfo_Response_User::_internal_status() const {
  return _impl_.status_;
}
inline int32_t RoomInfo_Response_User::status() const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.RoomInfo_Response.User.status)
  return _internal_status();
}
inline void RoomInfo_Response_User::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void RoomInfo_Response_User::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Room_Protobuf.RoomInfo_Response.User.status)
}

// -------------------------------------------------------------------

// RoomInfo_Response

// repeated .Room_Protobuf.RoomInfo_Response.User userinfo = 1;
inline int RoomInfo_Response::_internal_userinfo_size() const {
  return _impl_.userinfo_.size();
}
inline int RoomInfo_Response::userinfo_size() const {
  return _internal_userinfo_size();
}
inline void RoomInfo_Response::clear_userinfo() {
  _impl_.userinfo_.Clear();
}
inline ::Room_Protobuf::RoomInfo_Response_User* RoomInfo_Response::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Room_Protobuf.RoomInfo_Response.userinfo)
  return _impl_.userinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room_Protobuf::RoomInfo_Response_User >*
RoomInfo_Response::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:Room_Protobuf.RoomInfo_Response.userinfo)
  return &_impl_.userinfo_;
}
inline const ::Room_Protobuf::RoomInfo_Response_User& RoomInfo_Response::_internal_userinfo(int index) const {
  return _impl_.userinfo_.Get(index);
}
inline const ::Room_Protobuf::RoomInfo_Response_User& RoomInfo_Response::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.RoomInfo_Response.userinfo)
  return _internal_userinfo(index);
}
inline ::Room_Protobuf::RoomInfo_Response_User* RoomInfo_Response::_internal_add_userinfo() {
  return _impl_.userinfo_.Add();
}
inline ::Room_Protobuf::RoomInfo_Response_User* RoomInfo_Response::add_userinfo() {
  ::Room_Protobuf::RoomInfo_Response_User* _add = _internal_add_userinfo();
  // @@protoc_insertion_point(field_add:Room_Protobuf.RoomInfo_Response.userinfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room_Protobuf::RoomInfo_Response_User >&
RoomInfo_Response::userinfo() const {
  // @@protoc_insertion_point(field_list:Room_Protobuf.RoomInfo_Response.userinfo)
  return _impl_.userinfo_;
}

// -------------------------------------------------------------------

// RoomMessage_Request

// string content = 1;
inline void RoomMessage_Request::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RoomMessage_Request::content() const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.RoomMessage_Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomMessage_Request::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Room_Protobuf.RoomMessage_Request.content)
}
inline std::string* RoomMessage_Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Room_Protobuf.RoomMessage_Request.content)
  return _s;
}
inline const std::string& RoomMessage_Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void RoomMessage_Request::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomMessage_Request::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomMessage_Request::release_content() {
  // @@protoc_insertion_point(field_release:Room_Protobuf.RoomMessage_Request.content)
  return _impl_.content_.Release();
}
inline void RoomMessage_Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Room_Protobuf.RoomMessage_Request.content)
}

// -------------------------------------------------------------------

// RoomMessage_Response

// string content = 2;
inline void RoomMessage_Response::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RoomMessage_Response::content() const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.RoomMessage_Response.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomMessage_Response::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Room_Protobuf.RoomMessage_Response.content)
}
inline std::string* RoomMessage_Response::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Room_Protobuf.RoomMessage_Response.content)
  return _s;
}
inline const std::string& RoomMessage_Response::_internal_content() const {
  return _impl_.content_.Get();
}
inline void RoomMessage_Response::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomMessage_Response::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomMessage_Response::release_content() {
  // @@protoc_insertion_point(field_release:Room_Protobuf.RoomMessage_Response.content)
  return _impl_.content_.Release();
}
inline void RoomMessage_Response::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Room_Protobuf.RoomMessage_Response.content)
}

// -------------------------------------------------------------------

// Start_Response

// int32 result = 1;
inline void Start_Response::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t Start_Response::_internal_result() const {
  return _impl_.result_;
}
inline int32_t Start_Response::result() const {
  // @@protoc_insertion_point(field_get:Room_Protobuf.Start_Response.result)
  return _internal_result();
}
inline void Start_Response::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void Start_Response::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Room_Protobuf.Start_Response.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Room_Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Room_5fProtocol_2eproto
