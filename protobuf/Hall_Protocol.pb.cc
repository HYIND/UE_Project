// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hall_Protocol.proto

#include "Hall_Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Hall_Protobuf {
PROTOBUF_CONSTEXPR HallInfo_Response_User::HallInfo_Response_User(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HallInfo_Response_UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HallInfo_Response_UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HallInfo_Response_UserDefaultTypeInternal() {}
  union {
    HallInfo_Response_User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HallInfo_Response_UserDefaultTypeInternal _HallInfo_Response_User_default_instance_;
PROTOBUF_CONSTEXPR HallInfo_Response_RoomInfo::HallInfo_Response_RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HallInfo_Response_RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HallInfo_Response_RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HallInfo_Response_RoomInfoDefaultTypeInternal() {}
  union {
    HallInfo_Response_RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HallInfo_Response_RoomInfoDefaultTypeInternal _HallInfo_Response_RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR HallInfo_Response::HallInfo_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userinfo_)*/{}
  , /*decltype(_impl_.roominfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HallInfo_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HallInfo_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HallInfo_ResponseDefaultTypeInternal() {}
  union {
    HallInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HallInfo_ResponseDefaultTypeInternal _HallInfo_Response_default_instance_;
PROTOBUF_CONSTEXPR HallMessage_Request::HallMessage_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HallMessage_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HallMessage_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HallMessage_RequestDefaultTypeInternal() {}
  union {
    HallMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HallMessage_RequestDefaultTypeInternal _HallMessage_Request_default_instance_;
PROTOBUF_CONSTEXPR HallMessage_Response::HallMessage_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HallMessage_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HallMessage_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HallMessage_ResponseDefaultTypeInternal() {}
  union {
    HallMessage_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HallMessage_ResponseDefaultTypeInternal _HallMessage_Response_default_instance_;
PROTOBUF_CONSTEXPR EnterRoom_Request::EnterRoom_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterRoom_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterRoom_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterRoom_RequestDefaultTypeInternal() {}
  union {
    EnterRoom_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterRoom_RequestDefaultTypeInternal _EnterRoom_Request_default_instance_;
PROTOBUF_CONSTEXPR EnterRoom_Response::EnterRoom_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterRoom_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterRoom_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterRoom_ResponseDefaultTypeInternal() {}
  union {
    EnterRoom_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterRoom_ResponseDefaultTypeInternal _EnterRoom_Response_default_instance_;
PROTOBUF_CONSTEXPR Ping_info::Ping_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ping_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ping_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ping_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ping_infoDefaultTypeInternal() {}
  union {
    Ping_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ping_infoDefaultTypeInternal _Ping_info_default_instance_;
}  // namespace Hall_Protobuf
static ::_pb::Metadata file_level_metadata_Hall_5fProtocol_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Hall_5fProtocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Hall_5fProtocol_2eproto = nullptr;

const uint32_t TableStruct_Hall_5fProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response_User, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response_RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response_RoomInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response_RoomInfo, _impl_.host_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response, _impl_.userinfo_),
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallInfo_Response, _impl_.roominfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallMessage_Request, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallMessage_Response, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::HallMessage_Response, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::EnterRoom_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::EnterRoom_Request, _impl_.room_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::EnterRoom_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::EnterRoom_Response, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::EnterRoom_Response, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_info, _impl_.ping_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Hall_Protobuf::HallInfo_Response_User)},
  { 7, -1, -1, sizeof(::Hall_Protobuf::HallInfo_Response_RoomInfo)},
  { 15, -1, -1, sizeof(::Hall_Protobuf::HallInfo_Response)},
  { 23, -1, -1, sizeof(::Hall_Protobuf::HallMessage_Request)},
  { 30, -1, -1, sizeof(::Hall_Protobuf::HallMessage_Response)},
  { 38, -1, -1, sizeof(::Hall_Protobuf::EnterRoom_Request)},
  { 45, -1, -1, sizeof(::Hall_Protobuf::EnterRoom_Response)},
  { 53, -1, -1, sizeof(::Hall_Protobuf::Ping_info)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Hall_Protobuf::_HallInfo_Response_User_default_instance_._instance,
  &::Hall_Protobuf::_HallInfo_Response_RoomInfo_default_instance_._instance,
  &::Hall_Protobuf::_HallInfo_Response_default_instance_._instance,
  &::Hall_Protobuf::_HallMessage_Request_default_instance_._instance,
  &::Hall_Protobuf::_HallMessage_Response_default_instance_._instance,
  &::Hall_Protobuf::_EnterRoom_Request_default_instance_._instance,
  &::Hall_Protobuf::_EnterRoom_Response_default_instance_._instance,
  &::Hall_Protobuf::_Ping_info_default_instance_._instance,
};

const char descriptor_table_protodef_Hall_5fProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Hall_Protocol.proto\022\rHall_Protobuf\"\317\001\n"
  "\021HallInfo_Response\0227\n\010userinfo\030\001 \003(\0132%.H"
  "all_Protobuf.HallInfo_Response.User\022;\n\010r"
  "oominfo\030\002 \003(\0132).Hall_Protobuf.HallInfo_R"
  "esponse.RoomInfo\032\024\n\004User\022\014\n\004name\030\001 \001(\t\032."
  "\n\010RoomInfo\022\017\n\007room_id\030\001 \001(\005\022\021\n\thost_name"
  "\030\002 \001(\t\"&\n\023HallMessage_Request\022\017\n\007content"
  "\030\001 \001(\t\"5\n\024HallMessage_Response\022\014\n\004name\030\001"
  " \001(\t\022\017\n\007content\030\002 \001(\t\"$\n\021EnterRoom_Reque"
  "st\022\017\n\007room_id\030\001 \001(\005\"5\n\022EnterRoom_Respons"
  "e\022\017\n\007room_id\030\001 \001(\005\022\016\n\006result\030\002 \001(\005\"\034\n\tPi"
  "ng_info\022\017\n\007ping_id\030\001 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Hall_5fProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Hall_5fProtocol_2eproto = {
    false, false, 472, descriptor_table_protodef_Hall_5fProtocol_2eproto,
    "Hall_Protocol.proto",
    &descriptor_table_Hall_5fProtocol_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_Hall_5fProtocol_2eproto::offsets,
    file_level_metadata_Hall_5fProtocol_2eproto, file_level_enum_descriptors_Hall_5fProtocol_2eproto,
    file_level_service_descriptors_Hall_5fProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Hall_5fProtocol_2eproto_getter() {
  return &descriptor_table_Hall_5fProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Hall_5fProtocol_2eproto(&descriptor_table_Hall_5fProtocol_2eproto);
namespace Hall_Protobuf {

// ===================================================================

class HallInfo_Response_User::_Internal {
 public:
};

HallInfo_Response_User::HallInfo_Response_User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.HallInfo_Response.User)
}
HallInfo_Response_User::HallInfo_Response_User(const HallInfo_Response_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HallInfo_Response_User* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.HallInfo_Response.User)
}

inline void HallInfo_Response_User::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HallInfo_Response_User::~HallInfo_Response_User() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.HallInfo_Response.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HallInfo_Response_User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void HallInfo_Response_User::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HallInfo_Response_User::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.HallInfo_Response.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HallInfo_Response_User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.HallInfo_Response.User.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HallInfo_Response_User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.HallInfo_Response.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.HallInfo_Response.User.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.HallInfo_Response.User)
  return target;
}

size_t HallInfo_Response_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.HallInfo_Response.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HallInfo_Response_User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HallInfo_Response_User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HallInfo_Response_User::GetClassData() const { return &_class_data_; }


void HallInfo_Response_User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HallInfo_Response_User*>(&to_msg);
  auto& from = static_cast<const HallInfo_Response_User&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.HallInfo_Response.User)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HallInfo_Response_User::CopyFrom(const HallInfo_Response_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.HallInfo_Response.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallInfo_Response_User::IsInitialized() const {
  return true;
}

void HallInfo_Response_User::InternalSwap(HallInfo_Response_User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HallInfo_Response_User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[0]);
}

// ===================================================================

class HallInfo_Response_RoomInfo::_Internal {
 public:
};

HallInfo_Response_RoomInfo::HallInfo_Response_RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.HallInfo_Response.RoomInfo)
}
HallInfo_Response_RoomInfo::HallInfo_Response_RoomInfo(const HallInfo_Response_RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HallInfo_Response_RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_name_){}
    , decltype(_impl_.room_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.room_id_ = from._impl_.room_id_;
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.HallInfo_Response.RoomInfo)
}

inline void HallInfo_Response_RoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_name_){}
    , decltype(_impl_.room_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HallInfo_Response_RoomInfo::~HallInfo_Response_RoomInfo() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.HallInfo_Response.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HallInfo_Response_RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_name_.Destroy();
}

void HallInfo_Response_RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HallInfo_Response_RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.HallInfo_Response.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_name_.ClearToEmpty();
  _impl_.room_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HallInfo_Response_RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.HallInfo_Response.RoomInfo.host_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HallInfo_Response_RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.HallInfo_Response.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // string host_name = 2;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.HallInfo_Response.RoomInfo.host_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.HallInfo_Response.RoomInfo)
  return target;
}

size_t HallInfo_Response_RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.HallInfo_Response.RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_name = 2;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HallInfo_Response_RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HallInfo_Response_RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HallInfo_Response_RoomInfo::GetClassData() const { return &_class_data_; }


void HallInfo_Response_RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HallInfo_Response_RoomInfo*>(&to_msg);
  auto& from = static_cast<const HallInfo_Response_RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.HallInfo_Response.RoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  if (from._internal_room_id() != 0) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HallInfo_Response_RoomInfo::CopyFrom(const HallInfo_Response_RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.HallInfo_Response.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallInfo_Response_RoomInfo::IsInitialized() const {
  return true;
}

void HallInfo_Response_RoomInfo::InternalSwap(HallInfo_Response_RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
  swap(_impl_.room_id_, other->_impl_.room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HallInfo_Response_RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[1]);
}

// ===================================================================

class HallInfo_Response::_Internal {
 public:
};

HallInfo_Response::HallInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.HallInfo_Response)
}
HallInfo_Response::HallInfo_Response(const HallInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HallInfo_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfo_){from._impl_.userinfo_}
    , decltype(_impl_.roominfo_){from._impl_.roominfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.HallInfo_Response)
}

inline void HallInfo_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userinfo_){arena}
    , decltype(_impl_.roominfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HallInfo_Response::~HallInfo_Response() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.HallInfo_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HallInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userinfo_.~RepeatedPtrField();
  _impl_.roominfo_.~RepeatedPtrField();
}

void HallInfo_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HallInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.HallInfo_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userinfo_.Clear();
  _impl_.roominfo_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HallInfo_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Hall_Protobuf.HallInfo_Response.User userinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_userinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Hall_Protobuf.HallInfo_Response.RoomInfo roominfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roominfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HallInfo_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.HallInfo_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Hall_Protobuf.HallInfo_Response.User userinfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_userinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_userinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Hall_Protobuf.HallInfo_Response.RoomInfo roominfo = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roominfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_roominfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.HallInfo_Response)
  return target;
}

size_t HallInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.HallInfo_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Hall_Protobuf.HallInfo_Response.User userinfo = 1;
  total_size += 1UL * this->_internal_userinfo_size();
  for (const auto& msg : this->_impl_.userinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Hall_Protobuf.HallInfo_Response.RoomInfo roominfo = 2;
  total_size += 1UL * this->_internal_roominfo_size();
  for (const auto& msg : this->_impl_.roominfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HallInfo_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HallInfo_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HallInfo_Response::GetClassData() const { return &_class_data_; }


void HallInfo_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HallInfo_Response*>(&to_msg);
  auto& from = static_cast<const HallInfo_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.HallInfo_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.userinfo_.MergeFrom(from._impl_.userinfo_);
  _this->_impl_.roominfo_.MergeFrom(from._impl_.roominfo_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HallInfo_Response::CopyFrom(const HallInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.HallInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallInfo_Response::IsInitialized() const {
  return true;
}

void HallInfo_Response::InternalSwap(HallInfo_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.userinfo_.InternalSwap(&other->_impl_.userinfo_);
  _impl_.roominfo_.InternalSwap(&other->_impl_.roominfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HallInfo_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[2]);
}

// ===================================================================

class HallMessage_Request::_Internal {
 public:
};

HallMessage_Request::HallMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.HallMessage_Request)
}
HallMessage_Request::HallMessage_Request(const HallMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HallMessage_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.HallMessage_Request)
}

inline void HallMessage_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HallMessage_Request::~HallMessage_Request() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.HallMessage_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HallMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void HallMessage_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HallMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.HallMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HallMessage_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.HallMessage_Request.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HallMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.HallMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.HallMessage_Request.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.HallMessage_Request)
  return target;
}

size_t HallMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.HallMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HallMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HallMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HallMessage_Request::GetClassData() const { return &_class_data_; }


void HallMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HallMessage_Request*>(&to_msg);
  auto& from = static_cast<const HallMessage_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.HallMessage_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HallMessage_Request::CopyFrom(const HallMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.HallMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallMessage_Request::IsInitialized() const {
  return true;
}

void HallMessage_Request::InternalSwap(HallMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HallMessage_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[3]);
}

// ===================================================================

class HallMessage_Response::_Internal {
 public:
};

HallMessage_Response::HallMessage_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.HallMessage_Response)
}
HallMessage_Response::HallMessage_Response(const HallMessage_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HallMessage_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.HallMessage_Response)
}

inline void HallMessage_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HallMessage_Response::~HallMessage_Response() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.HallMessage_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HallMessage_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
}

void HallMessage_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HallMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.HallMessage_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HallMessage_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.HallMessage_Response.name"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.HallMessage_Response.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HallMessage_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.HallMessage_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.HallMessage_Response.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.HallMessage_Response.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.HallMessage_Response)
  return target;
}

size_t HallMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.HallMessage_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HallMessage_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HallMessage_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HallMessage_Response::GetClassData() const { return &_class_data_; }


void HallMessage_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HallMessage_Response*>(&to_msg);
  auto& from = static_cast<const HallMessage_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.HallMessage_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HallMessage_Response::CopyFrom(const HallMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.HallMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallMessage_Response::IsInitialized() const {
  return true;
}

void HallMessage_Response::InternalSwap(HallMessage_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HallMessage_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[4]);
}

// ===================================================================

class EnterRoom_Request::_Internal {
 public:
};

EnterRoom_Request::EnterRoom_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.EnterRoom_Request)
}
EnterRoom_Request::EnterRoom_Request(const EnterRoom_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterRoom_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.room_id_ = from._impl_.room_id_;
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.EnterRoom_Request)
}

inline void EnterRoom_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterRoom_Request::~EnterRoom_Request() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.EnterRoom_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterRoom_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterRoom_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterRoom_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.EnterRoom_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoom_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterRoom_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.EnterRoom_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.EnterRoom_Request)
  return target;
}

size_t EnterRoom_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.EnterRoom_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterRoom_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterRoom_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterRoom_Request::GetClassData() const { return &_class_data_; }


void EnterRoom_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterRoom_Request*>(&to_msg);
  auto& from = static_cast<const EnterRoom_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.EnterRoom_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterRoom_Request::CopyFrom(const EnterRoom_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.EnterRoom_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoom_Request::IsInitialized() const {
  return true;
}

void EnterRoom_Request::InternalSwap(EnterRoom_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.room_id_, other->_impl_.room_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoom_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[5]);
}

// ===================================================================

class EnterRoom_Response::_Internal {
 public:
};

EnterRoom_Response::EnterRoom_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.EnterRoom_Response)
}
EnterRoom_Response::EnterRoom_Response(const EnterRoom_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterRoom_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.room_id_, &from._impl_.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.EnterRoom_Response)
}

inline void EnterRoom_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){0}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterRoom_Response::~EnterRoom_Response() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.EnterRoom_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterRoom_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterRoom_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterRoom_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.EnterRoom_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.room_id_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoom_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterRoom_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.EnterRoom_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.EnterRoom_Response)
  return target;
}

size_t EnterRoom_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.EnterRoom_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  // int32 result = 2;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterRoom_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterRoom_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterRoom_Response::GetClassData() const { return &_class_data_; }


void EnterRoom_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterRoom_Response*>(&to_msg);
  auto& from = static_cast<const EnterRoom_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.EnterRoom_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_room_id() != 0) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterRoom_Response::CopyFrom(const EnterRoom_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.EnterRoom_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoom_Response::IsInitialized() const {
  return true;
}

void EnterRoom_Response::InternalSwap(EnterRoom_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterRoom_Response, _impl_.result_)
      + sizeof(EnterRoom_Response::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(EnterRoom_Response, _impl_.room_id_)>(
          reinterpret_cast<char*>(&_impl_.room_id_),
          reinterpret_cast<char*>(&other->_impl_.room_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoom_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[6]);
}

// ===================================================================

class Ping_info::_Internal {
 public:
};

Ping_info::Ping_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.Ping_info)
}
Ping_info::Ping_info(const Ping_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ping_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ping_id_ = from._impl_.ping_id_;
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.Ping_info)
}

inline void Ping_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ping_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping_info::~Ping_info() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.Ping_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping_info::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.Ping_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ping_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ping_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.Ping_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ping_id = 1;
  if (this->_internal_ping_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ping_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.Ping_info)
  return target;
}

size_t Ping_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.Ping_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ping_id = 1;
  if (this->_internal_ping_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ping_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping_info::GetClassData() const { return &_class_data_; }


void Ping_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping_info*>(&to_msg);
  auto& from = static_cast<const Ping_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.Ping_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ping_id() != 0) {
    _this->_internal_set_ping_id(from._internal_ping_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping_info::CopyFrom(const Ping_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.Ping_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping_info::IsInitialized() const {
  return true;
}

void Ping_info::InternalSwap(Ping_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ping_id_, other->_impl_.ping_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Hall_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::HallInfo_Response_User*
Arena::CreateMaybeMessage< ::Hall_Protobuf::HallInfo_Response_User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::HallInfo_Response_User >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::HallInfo_Response_RoomInfo*
Arena::CreateMaybeMessage< ::Hall_Protobuf::HallInfo_Response_RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::HallInfo_Response_RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::HallInfo_Response*
Arena::CreateMaybeMessage< ::Hall_Protobuf::HallInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::HallInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::HallMessage_Request*
Arena::CreateMaybeMessage< ::Hall_Protobuf::HallMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::HallMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::HallMessage_Response*
Arena::CreateMaybeMessage< ::Hall_Protobuf::HallMessage_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::HallMessage_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::EnterRoom_Request*
Arena::CreateMaybeMessage< ::Hall_Protobuf::EnterRoom_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::EnterRoom_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::EnterRoom_Response*
Arena::CreateMaybeMessage< ::Hall_Protobuf::EnterRoom_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::EnterRoom_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::Ping_info*
Arena::CreateMaybeMessage< ::Hall_Protobuf::Ping_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::Ping_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
