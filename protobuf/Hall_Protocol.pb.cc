// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hall_Protocol.proto

#include "Hall_Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Hall_Protobuf {
PROTOBUF_CONSTEXPR PublicMessage_Request::PublicMessage_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicMessage_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicMessage_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicMessage_RequestDefaultTypeInternal() {}
  union {
    PublicMessage_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicMessage_RequestDefaultTypeInternal _PublicMessage_Request_default_instance_;
PROTOBUF_CONSTEXPR PublicMessage_MutiResponse::PublicMessage_MutiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublicMessage_MutiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicMessage_MutiResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicMessage_MutiResponseDefaultTypeInternal() {}
  union {
    PublicMessage_MutiResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicMessage_MutiResponseDefaultTypeInternal _PublicMessage_MutiResponse_default_instance_;
PROTOBUF_CONSTEXPR Ping_Request::Ping_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pingpack_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ping_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ping_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ping_RequestDefaultTypeInternal() {}
  union {
    Ping_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ping_RequestDefaultTypeInternal _Ping_Request_default_instance_;
PROTOBUF_CONSTEXPR Ping_Response::Ping_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pingpack_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Ping_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ping_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ping_ResponseDefaultTypeInternal() {}
  union {
    Ping_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ping_ResponseDefaultTypeInternal _Ping_Response_default_instance_;
}  // namespace Hall_Protobuf
static ::_pb::Metadata file_level_metadata_Hall_5fProtocol_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Hall_5fProtocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Hall_5fProtocol_2eproto = nullptr;

const uint32_t TableStruct_Hall_5fProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::PublicMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::PublicMessage_Request, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::PublicMessage_MutiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::PublicMessage_MutiResponse, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::PublicMessage_MutiResponse, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_Request, _impl_.pingpack_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Hall_Protobuf::Ping_Response, _impl_.pingpack_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Hall_Protobuf::PublicMessage_Request)},
  { 7, -1, -1, sizeof(::Hall_Protobuf::PublicMessage_MutiResponse)},
  { 15, -1, -1, sizeof(::Hall_Protobuf::Ping_Request)},
  { 22, -1, -1, sizeof(::Hall_Protobuf::Ping_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Hall_Protobuf::_PublicMessage_Request_default_instance_._instance,
  &::Hall_Protobuf::_PublicMessage_MutiResponse_default_instance_._instance,
  &::Hall_Protobuf::_Ping_Request_default_instance_._instance,
  &::Hall_Protobuf::_Ping_Response_default_instance_._instance,
};

const char descriptor_table_protodef_Hall_5fProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Hall_Protocol.proto\022\rHall_Protobuf\"(\n\025"
  "PublicMessage_Request\022\017\n\007content\030\001 \001(\t\";"
  "\n\032PublicMessage_MutiResponse\022\014\n\004name\030\001 \001"
  "(\t\022\017\n\007content\030\002 \001(\t\"#\n\014Ping_Request\022\023\n\013p"
  "ingpack_id\030\001 \001(\005\"$\n\rPing_Response\022\023\n\013pin"
  "gpack_id\030\001 \001(\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Hall_5fProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Hall_5fProtocol_2eproto = {
    false, false, 222, descriptor_table_protodef_Hall_5fProtocol_2eproto,
    "Hall_Protocol.proto",
    &descriptor_table_Hall_5fProtocol_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_Hall_5fProtocol_2eproto::offsets,
    file_level_metadata_Hall_5fProtocol_2eproto, file_level_enum_descriptors_Hall_5fProtocol_2eproto,
    file_level_service_descriptors_Hall_5fProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Hall_5fProtocol_2eproto_getter() {
  return &descriptor_table_Hall_5fProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Hall_5fProtocol_2eproto(&descriptor_table_Hall_5fProtocol_2eproto);
namespace Hall_Protobuf {

// ===================================================================

class PublicMessage_Request::_Internal {
 public:
};

PublicMessage_Request::PublicMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.PublicMessage_Request)
}
PublicMessage_Request::PublicMessage_Request(const PublicMessage_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicMessage_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.PublicMessage_Request)
}

inline void PublicMessage_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicMessage_Request::~PublicMessage_Request() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.PublicMessage_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicMessage_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void PublicMessage_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.PublicMessage_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicMessage_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.PublicMessage_Request.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicMessage_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.PublicMessage_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.PublicMessage_Request.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.PublicMessage_Request)
  return target;
}

size_t PublicMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.PublicMessage_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicMessage_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicMessage_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicMessage_Request::GetClassData() const { return &_class_data_; }


void PublicMessage_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicMessage_Request*>(&to_msg);
  auto& from = static_cast<const PublicMessage_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.PublicMessage_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicMessage_Request::CopyFrom(const PublicMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.PublicMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicMessage_Request::IsInitialized() const {
  return true;
}

void PublicMessage_Request::InternalSwap(PublicMessage_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicMessage_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[0]);
}

// ===================================================================

class PublicMessage_MutiResponse::_Internal {
 public:
};

PublicMessage_MutiResponse::PublicMessage_MutiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.PublicMessage_MutiResponse)
}
PublicMessage_MutiResponse::PublicMessage_MutiResponse(const PublicMessage_MutiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicMessage_MutiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.PublicMessage_MutiResponse)
}

inline void PublicMessage_MutiResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicMessage_MutiResponse::~PublicMessage_MutiResponse() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.PublicMessage_MutiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicMessage_MutiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.content_.Destroy();
}

void PublicMessage_MutiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicMessage_MutiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.PublicMessage_MutiResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicMessage_MutiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.PublicMessage_MutiResponse.name"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Hall_Protobuf.PublicMessage_MutiResponse.content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublicMessage_MutiResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.PublicMessage_MutiResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.PublicMessage_MutiResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Hall_Protobuf.PublicMessage_MutiResponse.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.PublicMessage_MutiResponse)
  return target;
}

size_t PublicMessage_MutiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.PublicMessage_MutiResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicMessage_MutiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicMessage_MutiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicMessage_MutiResponse::GetClassData() const { return &_class_data_; }


void PublicMessage_MutiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicMessage_MutiResponse*>(&to_msg);
  auto& from = static_cast<const PublicMessage_MutiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.PublicMessage_MutiResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicMessage_MutiResponse::CopyFrom(const PublicMessage_MutiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.PublicMessage_MutiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicMessage_MutiResponse::IsInitialized() const {
  return true;
}

void PublicMessage_MutiResponse::InternalSwap(PublicMessage_MutiResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicMessage_MutiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[1]);
}

// ===================================================================

class Ping_Request::_Internal {
 public:
};

Ping_Request::Ping_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.Ping_Request)
}
Ping_Request::Ping_Request(const Ping_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pingpack_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pingpack_id_ = from._impl_.pingpack_id_;
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.Ping_Request)
}

inline void Ping_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pingpack_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping_Request::~Ping_Request() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.Ping_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.Ping_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pingpack_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pingpack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pingpack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.Ping_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pingpack_id = 1;
  if (this->_internal_pingpack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pingpack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.Ping_Request)
  return target;
}

size_t Ping_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.Ping_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pingpack_id = 1;
  if (this->_internal_pingpack_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pingpack_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping_Request::GetClassData() const { return &_class_data_; }


void Ping_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping_Request*>(&to_msg);
  auto& from = static_cast<const Ping_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.Ping_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pingpack_id() != 0) {
    _this->_internal_set_pingpack_id(from._internal_pingpack_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping_Request::CopyFrom(const Ping_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.Ping_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping_Request::IsInitialized() const {
  return true;
}

void Ping_Request::InternalSwap(Ping_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pingpack_id_, other->_impl_.pingpack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[2]);
}

// ===================================================================

class Ping_Response::_Internal {
 public:
};

Ping_Response::Ping_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Hall_Protobuf.Ping_Response)
}
Ping_Response::Ping_Response(const Ping_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ping_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pingpack_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pingpack_id_ = from._impl_.pingpack_id_;
  // @@protoc_insertion_point(copy_constructor:Hall_Protobuf.Ping_Response)
}

inline void Ping_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pingpack_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Ping_Response::~Ping_Response() {
  // @@protoc_insertion_point(destructor:Hall_Protobuf.Ping_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ping_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ping_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ping_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Hall_Protobuf.Ping_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pingpack_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pingpack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pingpack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Hall_Protobuf.Ping_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pingpack_id = 1;
  if (this->_internal_pingpack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_pingpack_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Hall_Protobuf.Ping_Response)
  return target;
}

size_t Ping_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Hall_Protobuf.Ping_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pingpack_id = 1;
  if (this->_internal_pingpack_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pingpack_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ping_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping_Response::GetClassData() const { return &_class_data_; }


void Ping_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ping_Response*>(&to_msg);
  auto& from = static_cast<const Ping_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Hall_Protobuf.Ping_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pingpack_id() != 0) {
    _this->_internal_set_pingpack_id(from._internal_pingpack_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping_Response::CopyFrom(const Ping_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Hall_Protobuf.Ping_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping_Response::IsInitialized() const {
  return true;
}

void Ping_Response::InternalSwap(Ping_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pingpack_id_, other->_impl_.pingpack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Hall_5fProtocol_2eproto_getter, &descriptor_table_Hall_5fProtocol_2eproto_once,
      file_level_metadata_Hall_5fProtocol_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Hall_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::PublicMessage_Request*
Arena::CreateMaybeMessage< ::Hall_Protobuf::PublicMessage_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::PublicMessage_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::PublicMessage_MutiResponse*
Arena::CreateMaybeMessage< ::Hall_Protobuf::PublicMessage_MutiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::PublicMessage_MutiResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::Ping_Request*
Arena::CreateMaybeMessage< ::Hall_Protobuf::Ping_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::Ping_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Hall_Protobuf::Ping_Response*
Arena::CreateMaybeMessage< ::Hall_Protobuf::Ping_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Hall_Protobuf::Ping_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
