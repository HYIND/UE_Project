// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hall_Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Hall_5fProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Hall_5fProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Hall_5fProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Hall_5fProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Hall_5fProtocol_2eproto;
namespace Hall_Protobuf {
class Ping_Request;
struct Ping_RequestDefaultTypeInternal;
extern Ping_RequestDefaultTypeInternal _Ping_Request_default_instance_;
class Ping_Response;
struct Ping_ResponseDefaultTypeInternal;
extern Ping_ResponseDefaultTypeInternal _Ping_Response_default_instance_;
class PublicMessage_MutiResponse;
struct PublicMessage_MutiResponseDefaultTypeInternal;
extern PublicMessage_MutiResponseDefaultTypeInternal _PublicMessage_MutiResponse_default_instance_;
class PublicMessage_Request;
struct PublicMessage_RequestDefaultTypeInternal;
extern PublicMessage_RequestDefaultTypeInternal _PublicMessage_Request_default_instance_;
}  // namespace Hall_Protobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::Hall_Protobuf::Ping_Request* Arena::CreateMaybeMessage<::Hall_Protobuf::Ping_Request>(Arena*);
template<> ::Hall_Protobuf::Ping_Response* Arena::CreateMaybeMessage<::Hall_Protobuf::Ping_Response>(Arena*);
template<> ::Hall_Protobuf::PublicMessage_MutiResponse* Arena::CreateMaybeMessage<::Hall_Protobuf::PublicMessage_MutiResponse>(Arena*);
template<> ::Hall_Protobuf::PublicMessage_Request* Arena::CreateMaybeMessage<::Hall_Protobuf::PublicMessage_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Hall_Protobuf {

// ===================================================================

class PublicMessage_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hall_Protobuf.PublicMessage_Request) */ {
 public:
  inline PublicMessage_Request() : PublicMessage_Request(nullptr) {}
  ~PublicMessage_Request() override;
  explicit PROTOBUF_CONSTEXPR PublicMessage_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicMessage_Request(const PublicMessage_Request& from);
  PublicMessage_Request(PublicMessage_Request&& from) noexcept
    : PublicMessage_Request() {
    *this = ::std::move(from);
  }

  inline PublicMessage_Request& operator=(const PublicMessage_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicMessage_Request& operator=(PublicMessage_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicMessage_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicMessage_Request* internal_default_instance() {
    return reinterpret_cast<const PublicMessage_Request*>(
               &_PublicMessage_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicMessage_Request& a, PublicMessage_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicMessage_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicMessage_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicMessage_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicMessage_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicMessage_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicMessage_Request& from) {
    PublicMessage_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicMessage_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hall_Protobuf.PublicMessage_Request";
  }
  protected:
  explicit PublicMessage_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Hall_Protobuf.PublicMessage_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Hall_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class PublicMessage_MutiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hall_Protobuf.PublicMessage_MutiResponse) */ {
 public:
  inline PublicMessage_MutiResponse() : PublicMessage_MutiResponse(nullptr) {}
  ~PublicMessage_MutiResponse() override;
  explicit PROTOBUF_CONSTEXPR PublicMessage_MutiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicMessage_MutiResponse(const PublicMessage_MutiResponse& from);
  PublicMessage_MutiResponse(PublicMessage_MutiResponse&& from) noexcept
    : PublicMessage_MutiResponse() {
    *this = ::std::move(from);
  }

  inline PublicMessage_MutiResponse& operator=(const PublicMessage_MutiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicMessage_MutiResponse& operator=(PublicMessage_MutiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicMessage_MutiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicMessage_MutiResponse* internal_default_instance() {
    return reinterpret_cast<const PublicMessage_MutiResponse*>(
               &_PublicMessage_MutiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PublicMessage_MutiResponse& a, PublicMessage_MutiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicMessage_MutiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicMessage_MutiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicMessage_MutiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicMessage_MutiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicMessage_MutiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicMessage_MutiResponse& from) {
    PublicMessage_MutiResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicMessage_MutiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hall_Protobuf.PublicMessage_MutiResponse";
  }
  protected:
  explicit PublicMessage_MutiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:Hall_Protobuf.PublicMessage_MutiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Hall_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Ping_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hall_Protobuf.Ping_Request) */ {
 public:
  inline Ping_Request() : Ping_Request(nullptr) {}
  ~Ping_Request() override;
  explicit PROTOBUF_CONSTEXPR Ping_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping_Request(const Ping_Request& from);
  Ping_Request(Ping_Request&& from) noexcept
    : Ping_Request() {
    *this = ::std::move(from);
  }

  inline Ping_Request& operator=(const Ping_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping_Request& operator=(Ping_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping_Request* internal_default_instance() {
    return reinterpret_cast<const Ping_Request*>(
               &_Ping_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Ping_Request& a, Ping_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping_Request& from) {
    Ping_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hall_Protobuf.Ping_Request";
  }
  protected:
  explicit Ping_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingpackIdFieldNumber = 1,
  };
  // int32 pingpack_id = 1;
  void clear_pingpack_id();
  int32_t pingpack_id() const;
  void set_pingpack_id(int32_t value);
  private:
  int32_t _internal_pingpack_id() const;
  void _internal_set_pingpack_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Hall_Protobuf.Ping_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t pingpack_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Hall_5fProtocol_2eproto;
};
// -------------------------------------------------------------------

class Ping_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Hall_Protobuf.Ping_Response) */ {
 public:
  inline Ping_Response() : Ping_Response(nullptr) {}
  ~Ping_Response() override;
  explicit PROTOBUF_CONSTEXPR Ping_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping_Response(const Ping_Response& from);
  Ping_Response(Ping_Response&& from) noexcept
    : Ping_Response() {
    *this = ::std::move(from);
  }

  inline Ping_Response& operator=(const Ping_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping_Response& operator=(Ping_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ping_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping_Response* internal_default_instance() {
    return reinterpret_cast<const Ping_Response*>(
               &_Ping_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ping_Response& a, Ping_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ping_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ping_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ping_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Ping_Response& from) {
    Ping_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Hall_Protobuf.Ping_Response";
  }
  protected:
  explicit Ping_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPingpackIdFieldNumber = 1,
  };
  // int32 pingpack_id = 1;
  void clear_pingpack_id();
  int32_t pingpack_id() const;
  void set_pingpack_id(int32_t value);
  private:
  int32_t _internal_pingpack_id() const;
  void _internal_set_pingpack_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Hall_Protobuf.Ping_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t pingpack_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Hall_5fProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicMessage_Request

// string content = 1;
inline void PublicMessage_Request::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& PublicMessage_Request::content() const {
  // @@protoc_insertion_point(field_get:Hall_Protobuf.PublicMessage_Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicMessage_Request::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Hall_Protobuf.PublicMessage_Request.content)
}
inline std::string* PublicMessage_Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Hall_Protobuf.PublicMessage_Request.content)
  return _s;
}
inline const std::string& PublicMessage_Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void PublicMessage_Request::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicMessage_Request::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicMessage_Request::release_content() {
  // @@protoc_insertion_point(field_release:Hall_Protobuf.PublicMessage_Request.content)
  return _impl_.content_.Release();
}
inline void PublicMessage_Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Hall_Protobuf.PublicMessage_Request.content)
}

// -------------------------------------------------------------------

// PublicMessage_MutiResponse

// string name = 1;
inline void PublicMessage_MutiResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PublicMessage_MutiResponse::name() const {
  // @@protoc_insertion_point(field_get:Hall_Protobuf.PublicMessage_MutiResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicMessage_MutiResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Hall_Protobuf.PublicMessage_MutiResponse.name)
}
inline std::string* PublicMessage_MutiResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Hall_Protobuf.PublicMessage_MutiResponse.name)
  return _s;
}
inline const std::string& PublicMessage_MutiResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PublicMessage_MutiResponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicMessage_MutiResponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicMessage_MutiResponse::release_name() {
  // @@protoc_insertion_point(field_release:Hall_Protobuf.PublicMessage_MutiResponse.name)
  return _impl_.name_.Release();
}
inline void PublicMessage_MutiResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Hall_Protobuf.PublicMessage_MutiResponse.name)
}

// string content = 2;
inline void PublicMessage_MutiResponse::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& PublicMessage_MutiResponse::content() const {
  // @@protoc_insertion_point(field_get:Hall_Protobuf.PublicMessage_MutiResponse.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicMessage_MutiResponse::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Hall_Protobuf.PublicMessage_MutiResponse.content)
}
inline std::string* PublicMessage_MutiResponse::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:Hall_Protobuf.PublicMessage_MutiResponse.content)
  return _s;
}
inline const std::string& PublicMessage_MutiResponse::_internal_content() const {
  return _impl_.content_.Get();
}
inline void PublicMessage_MutiResponse::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicMessage_MutiResponse::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicMessage_MutiResponse::release_content() {
  // @@protoc_insertion_point(field_release:Hall_Protobuf.PublicMessage_MutiResponse.content)
  return _impl_.content_.Release();
}
inline void PublicMessage_MutiResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Hall_Protobuf.PublicMessage_MutiResponse.content)
}

// -------------------------------------------------------------------

// Ping_Request

// int32 pingpack_id = 1;
inline void Ping_Request::clear_pingpack_id() {
  _impl_.pingpack_id_ = 0;
}
inline int32_t Ping_Request::_internal_pingpack_id() const {
  return _impl_.pingpack_id_;
}
inline int32_t Ping_Request::pingpack_id() const {
  // @@protoc_insertion_point(field_get:Hall_Protobuf.Ping_Request.pingpack_id)
  return _internal_pingpack_id();
}
inline void Ping_Request::_internal_set_pingpack_id(int32_t value) {
  
  _impl_.pingpack_id_ = value;
}
inline void Ping_Request::set_pingpack_id(int32_t value) {
  _internal_set_pingpack_id(value);
  // @@protoc_insertion_point(field_set:Hall_Protobuf.Ping_Request.pingpack_id)
}

// -------------------------------------------------------------------

// Ping_Response

// int32 pingpack_id = 1;
inline void Ping_Response::clear_pingpack_id() {
  _impl_.pingpack_id_ = 0;
}
inline int32_t Ping_Response::_internal_pingpack_id() const {
  return _impl_.pingpack_id_;
}
inline int32_t Ping_Response::pingpack_id() const {
  // @@protoc_insertion_point(field_get:Hall_Protobuf.Ping_Response.pingpack_id)
  return _internal_pingpack_id();
}
inline void Ping_Response::_internal_set_pingpack_id(int32_t value) {
  
  _impl_.pingpack_id_ = value;
}
inline void Ping_Response::set_pingpack_id(int32_t value) {
  _internal_set_pingpack_id(value);
  // @@protoc_insertion_point(field_set:Hall_Protobuf.Ping_Response.pingpack_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Hall_Protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Hall_5fProtocol_2eproto
